foo : u64;

AStruct :: struct
{
	member1 : s32;
	member2 : s64;
}

doThings :: (arg : f32) -> s64
{
	awesomeVariable : f32 = 25.2;
	{
		awesomeVariable : s32 = 2;
	}
	// Reference non existing variable
	//awesomeVariable = nonExistant;
}

operatorPrecedence :: (arg1 : u32, arg2 : u64 = 4) -> s32
{
	bar : u64 = arg2;
	baz : u32 = arg1;
	emi : u32 = 7;
	foo = 2 + 4 * 5;
	bar = 2 * 4 + 5;
	baz = 2 * (4 + 5); // Parenthesis
	emi = baz;

	// Same precedence
	emi = 2 + 4 - 5;
	emi = 2 - 4 + 5;

	// Unary
	bar = !foo;
	bar = !foo + 5;

	// Boolean
	flag : bool = bar == foo;
	flag = !foo;
	//notAFlag : f32 = bar == foo;

	baz += 16;
	baz -= 16;
	baz *= 16;
	baz /= 16;
}

outerProc :: ()
{
	outerVar : s64 = 25;
	innerProc :: ()
	{
		innerVar : s64 = outerVar;
	}

	innerProc();
}

scopes :: ()
{
	foo : s32 = 1;
	{
		bar : s32 = foo;
		{
			baz : s32 = foo;
			baz = bar;
		}
	}
}

main :: () -> s64
{
	//asd : AnotherStruct;
	var : u32 = 7;

	doThings(25.5);
	operatorPrecedence(var, 5);
}
