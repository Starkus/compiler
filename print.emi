PrintF :: (format : String, ...args)
{
	PrintArgument :: (arg : Any)
	{
		if arg.typeInfo.typeKind == TypeKind_Integer
		{
			intInfo := cast(^TypeInfoInteger) arg.typeInfo;
			num : s64;
			if intInfo.size == 1
				num = @ cast(^s8) arg.data;
			else if intInfo.size == 2
				num = @ cast(^s16) arg.data;
			else if intInfo.size == 4
				num = @ cast(^s32) arg.data;
			else if intInfo.size == 8
				num = @ cast(^s64) arg.data;

			buffer : [16] u8;
			n := num;
			count := 0;
			while n > 0
			{
				digit := n % 10;
				buffer[15 - count] = cast(u8) digit + '0';
				count += 1;
				n /= 10;
			}
			numStr : String;
			numStr.size = cast(u64) count;
			numStr.data = ^buffer[16 - count];
			Print(numStr);
		}
		else if arg.typeInfo.typeKind == TypeKind_Floating
		{
			floatInfo := cast(^TypeInfoFloating) arg.typeInfo;
			f : f64;
			if floatInfo.size == 4
				f = @ cast(^f32) arg.data;
			else if floatInfo.size == 8
				f = @ cast(^f64) arg.data;

			// Cheat
			buffer : [32] u8;
			count := 0;

			// Fraction
			n : s64 = f * 10000000;
			i := 7;
			while i > 0
			{
				digit := n % 10;
				buffer[31 - count] = cast(u8) digit + '0';
				count += 1;
				n /= 10;
				i -= 1;
			}
			buffer[31 - count] = '.';
			count += 1;

			// Wholes
			n = f;
			while n > 0
			{
				digit := n % 10;
				buffer[31 - count] = cast(u8) digit + '0';
				count += 1;
				n /= 10;
			}
			numStr : String;
			numStr.size = cast(u64) count;
			numStr.data = ^buffer[32 - count];
			Print(numStr);
		}
	}

	stdOut := GetStdHandle(-11);
	bytesWritten : s64;
	i : s64 = 0;
	argIdx := 0;
	while (i < cast(s64) format.size)
	{
		char : u8 = @(format.data + i);
		if char == '%'
		{
			PrintArgument(args[argIdx]);
			argIdx += 1;
		}
		else
		{
			WriteFile(stdOut, ^char, 1, ^bytesWritten, 0);
		}
		i += 1;
	}
}
