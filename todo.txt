* Fix - getting sucked into literal number tokens even when it is a binary - operator.
* Detect unreachable code and log error.
* Backend gets confused with infinite loops.
* Put 8 bit offsets on instructions where possible (mainly branches and calls). However this is
	complicated and codegen has way worse problems right now...
* Create fibers up to a maximum count, then wait for others to finish and get deleted. This would
	enable very edge cases where we could get full of fibers that can't finish but we can't create
	new ones to keep going...
* Allow for expanding memory in ThreadAllocator.
* Fix PrintIR, PrintAST and print asm before allocation.
* #defined is set to 0 even if another #defined would potentially define what we are looking for. I
	don't know how to solve this other than coming up with a complex dependency resolver. Right now
	jobs just make their own thing and ocasionally check other jobs' states.
* Is the whole thing where I make 'push value to stack' IR instruction necessary?
* Reduce moving things from one register to another unnecessarily
* Verify small structs are passed properly through parameters
* Return statements are being evaluated before deferred statements!
* Replace big inline zeroing/initializing with static data
* For known procedures, check what registers it uses and only save those upon calling it
* CodeGen: Flip operands when possible to avoid movs (e.g. immediate in cmp left hand)
