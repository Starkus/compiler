F64HighWord :: (x : f64) -> s32
{
	union
	{
		xAsFloat : f64;
		xAsBytes : u64;
	};
	xAsFloat = x;
	return cast(s32)(xAsBytes >> 32);
}

KSin :: (x : f64, y : f64, iy : s32) -> f64
{
	S1   :s f64 = -1.66666666666666324348e-01;
	S2   :s f64 =  8.33333333332248946124e-03;
	S3   :s f64 = -1.98412698298579493134e-04;
	S4   :s f64 =  2.75573137070700676789e-06;
	S5   :s f64 = -2.50507602534068634195e-08;
	S6   :s f64 =  1.58969099521155010221e-10;

	ix := F64HighWord(x) & 0x7fffffff;
	if (ix < 0x3e400000)				/* |x| < 2^-27 */
		if (cast(s32)x == 0) return x;	/* Approximate to x for small values */
	z := x * x;
	v := z * x;
	r := S2 + z * (S3 + z * (S4 + z * (S5 + z * S6)));
	if iy == 0 return x + v * (S1 + z * r);
	else	   return x - ((z * (0.5 * y - v * r) - y) - v * S1);
}

KCos :: (x : f64, y : f64) -> f64
{
	C1 :s f64 =  4.16666666666666019037e-02;
	C2 :s f64 = -1.38888888888741095749e-03;
	C3 :s f64 =  2.48015872894767294178e-05;
	C4 :s f64 = -2.75573143513906633035e-07;
	C5 :s f64 =  2.08757232129817482790e-09;
	C6 :s f64 = -1.13596475577881948265e-11;

	ix := F64HighWord(x) & 0x7fffffff;
	if ix < 0x3e400000
		if cast(s32)x == 0 return 1.0;
	z := x * x;
	r := z * (C1 + z * (C2 + z * (C3 + z * (C4 + z * (C5 + z * C6)))));
	if ix < 0x3fd33333
		return 1.0 - (0.5 * z - (z * r - x * y));
	else
	{
		union
		{
			qx : f64;
			struct
			{
				qxLow : s32;
				qxHigh : s32;
			};
		};
		if ix > 0x3fe90000
			qx = 0.28125;
		else
		{
			qxHigh = ix - 0x00200000;
			qxLow = 0;
		}
		hz := 0.5 * z - qx;
		a := 1.0 - qx;
		return a - (hz - (z * r - x * y));
	}
}

ReminderPiOver2 :: (x : f64, y : ^[2] f64) -> s32
{
	TWO24   :s f64 =  1.67772160000000000000e+07;
	INVPIO2 :s f64 =  6.36619772367581382433e-01;
	PIO2_1  :s f64 =  1.57079632673412561417e+00;
	PIO2_1T :s f64 =  6.07710050650619224932e-11;
	PIO2_2  :s f64 =  6.07710050630396597660e-11;
	PIO2_2T :s f64 =  2.02226624879595063154e-21;
	PIO2_3  :s f64 =  2.02226624871116645580e-21;
	PIO2_3T :s f64 =  8.47842766036889956997e-32;

	NPIO2_HW : [32] s32 = { // @Todo: make static.
		0x3FF921FB, 0x400921FB, 0x4012D97C, 0x401921FB, 0x401F6A7A, 0x4022D97C, 0x4025FDBB, 0x402921FB,
		0x402C463A, 0x402F6A7A, 0x4031475C, 0x4032D97C, 0x40346B9C, 0x4035FDBB, 0x40378FDB, 0x403921FB,
		0x403AB41B, 0x403C463A, 0x403DD85A, 0x403F6A7A, 0x40407E4C, 0x4041475C, 0x4042106C, 0x4042D97C,
		0x4043A28C, 0x40446B9C, 0x404534AC, 0x4045FDBB, 0x4046C6CB, 0x40478FDB, 0x404858EB, 0x404921FB
	};

	hx := F64HighWord(x);
	ix := hx & 0x7fffffff;
	if ix <= 0x3fe921fb		/* |x| ~<= pi/4 */
	{
		y[0] = x;
		y[1] = 0;
		return 0;
	}
	if ix < 0x4002d97c		/* |x| < 3pi/4 */
	{
		if hx > 0
		{
			z := x - PIO2_1;
			if ix != 0x3ff921fb
			{
				y[0] = z - PIO2_1T;
				y[1] = (z - y[0]) - PIO2_1T;
			}
			else
			{
				z -= PIO2_2;
				y[0] = z - PIO2_2T;
				y[1] = (z - y[0]) - PIO2_2T;
			}
			return 1;
		}
		else				/* negative */
		{
			z := x + PIO2_1;
			if ix != 0x3ff921fb
			{
				y[0] = z + PIO2_1T;
				y[1] = (z - y[0]) + PIO2_1T;
			}
			else
			{
				z += PIO2_2;
				y[0] = z + PIO2_2T;
				y[1] = (z - y[0]) + PIO2_2T;
			}
			return -1;
		}
	}
	if ix <= 0x413921fb		/* |x| ~<= 2^19 * (pi/2), medium size */
	{
		t := FAbs64(x);
		n := cast(s32)(t * INVPIO2 + 0.5);
		fn := cast(f64)n;
		r := t - fn * PIO2_1;
		w := fn * PIO2_1T;
		if (n < 32 && ix != NPIO2_HW[n - 1])
			y[0] = r - w;
		else
		{
			j := ix >> 20;
			y[0] = r - w;
			i := j - ((F64HighWord(y[0]) >> 20) & 0x7ff);
			if i > 16
			{
				t = r;
				w = fn * PIO2_2;
				r = t - w;
				w = fn * PIO2_2T - ((t - r) - w);
				y[0] = r - w;
				i = j - ((F64HighWord(y[0]) >> 20) & 0x7ff);
				if i > 49
				{
					t = r;
					w = fn * PIO2_3;
					r = t - w;
					w = fn * PIO2_3T - ((t - r) - w);
					y[0] = r - w;
				}
			}
		}
		y[1] = (r - y[0]) - w;
		if hx < 0
		{
			y[0] = -y[0];
			y[1] = -y[1];
			return -n;
		}
		else
			return n;
	}
	if ix >= 0x7ff00000
	{
		y[0] = x - x;
		y[1] = x - x;
		return 0;
	}
	// @Todo: big values
	Print("Big values not implemented!\n");
	return 0;
}

Sin :: (x : f64) -> f64
{
	xi := F64HighWord(x) &= 0x7fffffff;
	if (xi < 0x3fe921fb)				/* |x| ~< pi/4 */
		return KSin(x, 0, 0);

	// Inf and NaN
	else if (xi >= 0x7ff00000)
		return x - x;

	else
	{
		y : [2] f64 = ?;
		n := ReminderPiOver2(x, ^y);
		result : f64 = ?;
		if n & 1
			result = KCos(y[0], y[1]);
		else
			result = KSin(y[0], y[1], 1);

		if n & 2
			return -result;
		else
			return  result;
	}
}

Cos :: (x : f64) -> f64
{
	ix := F64HighWord(x) & 0x7fffffff;
	if ix <= 0x3fe921fb
		return KCos(x, 0);

	// Inf and NaN
	else if ix >= 0x7ff00000
		return x - x;

	else
	{
		y : [2] f64 = ?;
		n := ReminderPiOver2(x, ^y);
		if      ((n & 3) == 0)
			return  KCos(y[0], y[1]);
		else if ((n & 3) == 1)
			return -KSin(y[0], y[1], 1);
		else if ((n & 3) == 2)
			return -KCos(y[0], y[1]);
		else
			return  KSin(y[0], y[1], 1);
	}
}

Sqrt32 :: #inline (n : f32) -> f32
{
	#intrinsic(sqrt32, n, n);
	return n;
}

Sqrt64 :: #inline (n : f64) -> f64
{
	#intrinsic(sqrt64, n, n);
	return n;
}

FAbs64 :: (n : f64) -> f64
{
	union
	{
		nAsFloat : f64;
		nAsBytes : u64;
	};
	union
	{
		resultAsFloat : f64;
		resultAsBytes : u64;
	};
	nAsFloat = n;
	resultAsBytes = nAsBytes & 0x7fffffffffffffff;
	return resultAsFloat;
}
