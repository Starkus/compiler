__ImageBase : #external ^void;

// Size-based types
BYTE  :: #alias u8;
WORD  :: #alias u16;
DWORD :: #alias u32;
QWORD :: #alias u64;

// Fluffy C-like types
BOOL      :: #alias s32;
CHAR      :: #alias s8;
SHORT     :: #alias s16;
USHORT    :: #alias u16;
INT       :: #alias s32;
UINT      :: #alias u32;
LONG      :: #alias s32;
ULONG     :: #alias u32;
LONGLONG  :: #alias s64;
ULONGLONG :: #alias u64;
FLOAT     :: #alias f32;

// Weird size-based types
UINT8     :: #alias u8;
WCHAR     :: #alias s16;
DWORD32   :: #alias u32;
DWORD64   :: #alias u64;
LONG32    :: #alias s32;
LONG64    :: #alias s64;
ULONG32   :: #alias u32;
ULONG64   :: #alias u64;
DWORDLONG :: #alias u64;
SIZE_T    :: #alias u64;

// Other weird windows types
HANDLE  :: #alias ^void;
LPARAM  :: #alias u64;
WPARAM  :: #alias u64;
LRESULT :: #alias u64;
HRESULT :: #alias s32;

// Constants and flags
INVALID_HANDLE_VALUE :: 0xFFFFFFFFFFFFFFFF;
MEM_COMMIT      :: 0x00001000;
MEM_RESERVE     :: 0x00002000;
MEM_RESET       :: 0x00080000;
MEM_TOP_DOWN    :: 0x00100000;
MEM_WRTIE_WATCH :: 0x00200000;
MEM_PHYSICAL    :: 0x00400000;
MEM_RESET_UNDO  :: 0x01000000;
MEM_LARGE_PAGES :: 0x20000000;
MEM_DECOMMIT    :: 0x00004000;
MEM_RELEASE     :: 0x00008000;
PAGE_NOACCESS          :: 0x01;
PAGE_READONLY          :: 0x02;
PAGE_READWRITE         :: 0x04;
PAGE_WRITECOPY         :: 0x08;
PAGE_EXECUTE           :: 0x10;
PAGE_EXECUTE_READ      :: 0x20;
PAGE_EXECUTE_READWRITE :: 0x40;
PAGE_EXECUTE_WRITECOPY :: 0x80;
PAGE_GUARD             :: 0x100;
PAGE_NOCACHE           :: 0x200;
PAGE_WRITECOMBINE      :: 0x400;
PAGE_TARGETS_INVALID   :: 0x40000000;
PAGE_TARGETS_NO_UPDATE :: 0x40000000;
GENERIC_READ    :: 0x80000000;
GENERIC_WRITE   :: 0x40000000;
GENERIC_EXECUTE :: 0x20000000;
GENERIC_ALL     :: 0x10000000;
CREATE_NEW        :: 1;
CREATE_ALWAYS     :: 2;
OPEN_EXISTING     :: 3;
OPEN_ALWAYS       :: 4;
TRUNCATE_EXISTING :: 5;
FILE_SHARE_READ   :: 1;
FILE_SHARE_WRITE  :: 2;
FILE_SHARE_DELETE :: 4;
FILE_ATTRIBUTE_READONLY  :: 0x1;
FILE_ATTRIBUTE_HIDDEN    :: 0x2;
FILE_ATTRIBUTE_SYSTEM    :: 0x4;
FILE_ATTRIBUTE_ARCHIVE   :: 0x20;
FILE_ATTRIBUTE_NORMAL    :: 0x80;
FILE_ATTRIBUTE_TEMPORARY :: 0x100;
FILE_ATTRIBUTE_OFFLINE   :: 0x1000;
FILE_ATTRIBUTE_ENCRYPTED :: 0x4000;
ATTACH_PARENT_PROCESS :: -1;
WS_TILED            :: 0x00000000;
WS_OVERLAPPED       :: 0x00000000;
WS_MAXIMIZEBOX      :: 0x00010000;
WS_TABSTOP          :: 0x00010000;
WS_GROUP            :: 0x00020000;
WS_MINIMIZEBOX      :: 0x00020000;
WS_THICKFRAME       :: 0x00040000;
WS_SIZEBOX          :: 0x00040000;
WS_SYSMENU          :: 0x00080000;
WS_HSCROLL          :: 0x00100000;
WS_VSCROLL          :: 0x00200000;
WS_DLGFRAME         :: 0x00400000;
WS_BORDER           :: 0x00800000;
WS_CAPTION          :: 0x00C00000;
WS_MAXIMIZE         :: 0x01000000;
WS_CLIPCHILDREN     :: 0x02000000;
WS_CLIPSIBLINGS     :: 0x04000000;
WS_DISABLED         :: 0x08000000;
WS_VISIBLE          :: 0x10000000;
WS_ICONIC           :: 0x20000000;
WS_MINIMIZE         :: 0x20000000;
WS_CHILD            :: 0x40000000;
WS_CHILDWINDOW      :: 0x40000000;
WS_POPUP            :: 0x80000000;
WS_OVERLAPPEDWINDOW :: WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX;
CS_VREDRAW :: 0x0001;
CS_HREDRAW :: 0x0002;
CS_OWNDC   :: 0x0020;
SW_HIDE            :: 0;
SW_SHOWNORMAL      :: 1;
SW_NORMAL          :: 1;
SW_SHOWMINIMIZED   :: 2;
SW_SHOWMAXIMIZED   :: 3;
SW_MAXIMIZE        :: 3;
SW_SHOWNOACTIVATE  :: 4;
SW_SHOW            :: 5;
SW_MINIMIZE        :: 6;
SW_SHOWMINNOACTIVE :: 7;
SW_SHOWNA          :: 8;
SW_RESTORE         :: 9;
SW_SHOWDEFAULT     :: 10;
SW_FORCEMINIMIZE   :: 11;
PM_REMOVE  :: 0x0001;
WM_DESTROY :: 0x0002;
WM_SIZE    :: 0x0005;
WM_CLOSE   :: 0x0010;
WM_QUIT    :: 0x0012;
WM_KEYDOWN :: 0x0100;
WM_KEYUP   :: 0x0101;
PFD_DOUBLEBUFFER   :: 0x00000001;
PFD_DRAW_TO_WINDOW :: 0x00000004;
PFD_SUPPORT_OPENGL :: 0x00000020;
PFD_TYPE_RGBA :: 0;

// Virtual Keys, Standard Set
VK_LBUTTON :: 0x01;
VK_RBUTTON :: 0x02;
VK_CANCEL :: 0x03;
VK_MBUTTON :: 0x04;    /* NOT contiguous with L & RBUTTON */
VK_XBUTTON1 :: 0x05;    /* NOT contiguous with L & RBUTTON */
VK_XBUTTON2 :: 0x06;    /* NOT contiguous with L & RBUTTON */
VK_BACK :: 0x08;
VK_TAB :: 0x09;
VK_CLEAR :: 0x0C;
VK_RETURN :: 0x0D;
VK_SHIFT :: 0x10;
VK_CONTROL :: 0x11;
VK_MENU :: 0x12;
VK_PAUSE :: 0x13;
VK_CAPITAL :: 0x14;
VK_KANA :: 0x15;
VK_HANGEUL :: 0x15;  /* old name - should be here for compatibility */
VK_HANGUL :: 0x15;
VK_JUNJA :: 0x17;
VK_FINAL :: 0x18;
VK_HANJA :: 0x19;
VK_KANJI :: 0x19;
VK_ESCAPE :: 0x1B;
VK_CONVERT :: 0x1C;
VK_NONCONVERT :: 0x1D;
VK_ACCEPT :: 0x1E;
VK_MODECHANGE :: 0x1F;
VK_SPACE :: 0x20;
VK_PRIOR :: 0x21;
VK_NEXT :: 0x22;
VK_END :: 0x23;
VK_HOME :: 0x24;
VK_LEFT :: 0x25;
VK_UP :: 0x26;
VK_RIGHT :: 0x27;
VK_DOWN :: 0x28;
VK_SELECT :: 0x29;
VK_PRINT :: 0x2A;
VK_EXECUTE :: 0x2B;
VK_SNAPSHOT :: 0x2C;
VK_INSERT :: 0x2D;
VK_DELETE :: 0x2E;
VK_HELP :: 0x2F;

WNDCLASSEXA :: struct
{
	cbSize : UINT;
	style : UINT;
	lpfnWndProc : #convention(win64) (hWnd : HANDLE, uMsg : UINT, wParam : WPARAM,
						  lParam : LPARAM) -> LRESULT;
	cbClsExtra : INT;
	cbWndExtra : INT;
	hInstance : HANDLE;
	hIcon : HANDLE;
	hCursor : HANDLE;
	hBrush : HANDLE;
	lpszMenuName : ^CHAR;
	lpszClassName : ^CHAR;
	hIconSm : HANDLE;
};
POINT :: struct
{
	x : LONG;
	y : LONG;
};
RECT :: struct
{
	left   : LONG;
	top    : LONG;
	right  : LONG;
	bottom : LONG;
};
MSG :: struct
{
	hWnd : HANDLE;
	message : UINT;
	wParam : WPARAM;
	lParam : LPARAM;
	time : DWORD;
	pt : POINT;
	lPrivate : DWORD;
};
PIXELFORMATDESCRIPTOR :: struct
{
	nSize : WORD;
	nVersion : WORD;
	dwFlags : DWORD;
	iPixelType : CHAR;
	cColorBits : CHAR;
	cRedBits : CHAR;
	cRedShift : CHAR;
	cGreenBits : CHAR;
	cGreenShift : CHAR;
	cBlueBits : CHAR;
	cBlueShift : CHAR;
	cAlphaBits : CHAR;
	cAlphaShift : CHAR;
	cAccumBits : CHAR;
	cAccumRedBits : CHAR;
	cAccumGreenBits : CHAR;
	cAccumBlueBits : CHAR;
	cAccumAlphaBits : CHAR;
	cDepthBits : CHAR;
	cStencilBits : CHAR;
	cAuxBuffers : CHAR;
	iLayerType : CHAR;
	bReserved : CHAR;
	dwLayerMask : DWORD;
	dwVisibleMask : DWORD;
	dwDamageMask : DWORD;
};
LARGE_INTEGER :: union {
	struct {
		LowPart : DWORD;
		HighPart : LONG;
	};
	QuadPart : LONGLONG;
};
GUID :: struct
{
	Data1 : u32;
	Data2 : u16;
	Data3 : u16;
	Data4 : [8] u8;
};
LUID :: struct
{
	LowPart: DWORD;
	HighPart: LONG;
};

CreateFileA :: #external #convention(win64) (
		lpFileName : ^CHAR,
		dwDesiredAccess : DWORD,
		dwShareMode : DWORD,
		lpSecurityAttributes : ^void, // @Todo
		dwCreationDisposition : DWORD,
		dwFlagsAndAttributes : DWORD,
		hTemplateFile : HANDLE) -> HANDLE;
CloseHandle :: #external #convention(win64) (handle : HANDLE);
GetFileSize :: #external #convention(win64) (handle : HANDLE, lpFileSizeHigh : ^DWORD) -> DWORD;
ReadFile :: #external #convention(win64) (hFile : HANDLE, lpBuffer : ^void,
		nNumberOfBytesToRead : DWORD, lpNumberOfBytesRead : ^DWORD, lpOverlapped : ^void) -> BOOL;
VirtualAlloc :: #external #convention(win64) (lpAddress : ^void, dwSize : SIZE_T,
		flAllocationType : DWORD, flProtect : DWORD) -> ^void;
VirtualFree :: #external #convention(win64) (lpAddress : ^void, dwSize : SIZE_T,
		dwFreeType : DWORD) -> BOOL;
AttachConsole :: #external #convention(win64) (handle : HANDLE);
GetModuleHandleA :: #external #convention(win64) (lpModuleName : ^CHAR) -> HANDLE;
RegisterClassExA :: #external #convention(win64) (wndClass : ^WNDCLASSEXA) -> u16;
CreateWindowExA :: #external #convention(win64) (
		dwExStyle : DWORD,
		lpClassName : ^CHAR,
		lpWindowName : ^CHAR,
		dwStyle : DWORD,
		x : INT,
		y : INT,
		nWidth : INT,
		nHeight : INT,
		hWndParent : HANDLE,
		hMenu : HANDLE,
		hInstance : HANDLE,
		lpParam : ^void
	) -> HANDLE;
ShowWindow :: #external #convention(win64) (hWnd : HANDLE, nCmdShow : INT) -> BOOL;
GetLastError :: #external #convention(win64) () -> DWORD;
DefWindowProcA :: #external #convention(win64) (hWnd : HANDLE, uMsg : UINT, wParam : WPARAM,
		lParam : LPARAM) -> LRESULT;
PeekMessageA :: #external #convention(win64) (lpMsg : ^MSG, hWnd : HANDLE, wMsgFilterMin : UINT,
		wMsgFilterMax : UINT, wRemoveMsg : UINT) -> BOOL;
TranslateMessage :: #external #convention(win64) (message : ^MSG) -> BOOL;
DispatchMessageA :: #external #convention(win64) (message : ^MSG) -> LRESULT;
GetProcAddress :: #external #convention(win64) (hModule : HANDLE, lpProcName : ^CHAR) -> ^void;
GetDC :: #external #convention(win64) (hWnd : HANDLE) -> HANDLE;
ReleaseDC :: #external #convention(win64) (hWnd : HANDLE, hdc : HANDLE);
ChoosePixelFormat :: #external #convention(win64) (hdc : HANDLE, ppfd : ^PIXELFORMATDESCRIPTOR) -> INT;
SetPixelFormat :: #external #convention(win64) (hdc : HANDLE, format : INT, ppfd : ^PIXELFORMATDESCRIPTOR) -> BOOL;
PostQuitMessage :: #external #convention(win64) (nExitCode : INT);
DestroyWindow :: #external #convention(win64) (hWnd : HANDLE) -> BOOL;
TerminateProcess :: #external #convention(win64) (hProcess : HANDLE, uExitCode : UINT) -> BOOL;
TerminateThread :: #external #convention(win64) (hThread : HANDLE, uExitCode : UINT) -> BOOL;
QueryPerformanceCounter :: #external #convention(win64) (lpPerformanceCount : ^LARGE_INTEGER) -> BOOL;
QueryPerformanceFrequency :: #external #convention(win64) (lpFrequency : ^LARGE_INTEGER) -> BOOL;
AdjustWindowRect :: #external #convention(win64) (lpRect : ^RECT, dwStyle : DWORD, bMenu : BOOL) -> BOOL;
