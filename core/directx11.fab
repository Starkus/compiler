D3D11_SDK_VERSION :: 7;

// Constants
D3D11_ERROR_TOO_MANY_UNIQUE_STATE_OBJECTS				:: 0x887C0001;
D3D11_ERROR_FILE_NOT_FOUND							   :: 0x887C0002;
D3D11_ERROR_TOO_MANY_UNIQUE_VIEW_OBJECTS				 :: 0x887C0003;
D3D11_ERROR_DEFERRED_CONTEXT_MAP_WITHOUT_INITIAL_DISCARD :: 0x887C0004;
D3DERR_INVALIDCALL		   :: 0x887A0001;
DXGI_ERROR_INVALID_CALL	  :: 0x887A0001;
D3DERR_WASSTILLDRAWING	   :: 0x887A000A;
DXGI_ERROR_WAS_STILL_DRAWING :: 0x887A000A;
E_FAIL		:: 0x80004005;
E_INVALIDARG  :: 0x80070057;
E_OUTOFMEMORY :: 0x8007000E;
E_NOTIMPL	 :: 0x80004001;
S_FALSE :: 1;
S_OK :: 0;

D3DCOMPILE_DEBUG ::                              1 << 0;
D3DCOMPILE_SKIP_VALIDATION ::                    1 << 1;
D3DCOMPILE_SKIP_OPTIMIZATION ::                  1 << 2;
D3DCOMPILE_PACK_MATRIX_ROW_MAJOR ::              1 << 3;
D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR ::           1 << 4;
D3DCOMPILE_PARTIAL_PRECISION ::                  1 << 5;
D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT ::           1 << 6;
D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT ::           1 << 7;
D3DCOMPILE_NO_PRESHADER ::                       1 << 8;
D3DCOMPILE_AVOID_FLOW_CONTROL ::                 1 << 9;
D3DCOMPILE_PREFER_FLOW_CONTROL ::                1 << 10;
D3DCOMPILE_ENABLE_STRICTNESS ::                  1 << 11;
D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY ::     1 << 12;
D3DCOMPILE_IEEE_STRICTNESS ::                    1 << 13;
D3DCOMPILE_OPTIMIZATION_LEVEL0 ::                1 << 14;
D3DCOMPILE_OPTIMIZATION_LEVEL1 ::                0;
D3DCOMPILE_OPTIMIZATION_LEVEL2 ::                1 << 14 | 1 << 15;
D3DCOMPILE_OPTIMIZATION_LEVEL3 ::                1 << 15;
D3DCOMPILE_RESERVED16 ::                         1 << 16;
D3DCOMPILE_RESERVED17 ::                         1 << 17;
D3DCOMPILE_WARNINGS_ARE_ERRORS ::                1 << 18;
D3DCOMPILE_RESOURCES_MAY_ALIAS ::                1 << 19;
D3DCOMPILE_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES :: 1 << 20;
D3DCOMPILE_ALL_RESOURCES_BOUND ::                1 << 21;
D3DCOMPILE_DEBUG_NAME_FOR_SOURCE ::              1 << 22;
D3DCOMPILE_DEBUG_NAME_FOR_BINARY ::              1 << 23;

D3D_COMPILE_STANDARD_FILE_INCLUDE :: cast(^ID3DInclude)1;

// Structs
D3D_SHADER_MACRO :: struct
{
	Name: ^CHAR;
	Definition: ^CHAR;
}

D3D11_VIEWPORT :: struct
{
	TopLeftX: FLOAT;
	TopLeftY: FLOAT;
	Width: FLOAT;
	Height: FLOAT;
	MinDepth: FLOAT;
	MaxDepth: FLOAT;
}

D3D11_CLASS_INSTANCE_DESC :: struct
{
	InstanceId: UINT;
	InstanceIndex: UINT;
	TypeId: UINT;
	ConstantBuffer: UINT;
	BaseConstantBufferOffset: UINT;
	BaseTexture: UINT;
	BaseSampler: UINT;
	Created: BOOL;
}

D3D11_MAPPED_SUBRESOURCE :: struct
{
	pData: ^void;
	RowPitch: UINT;
	DepthPitch: UINT;
}

D3D11_TEXTURE1D_DESC :: struct
{
	Width: UINT;
	MipLevels: UINT;
	ArraySize: UINT;
	Format: DXGI_FORMAT;
	Usage: D3D11_USAGE;
	BindFlags: D3D11_BIND_FLAG;
	CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
	MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

D3D11_TEXTURE2D_DESC :: struct
{
	Width: UINT;
	Height: UINT;
	MipLevels: UINT;
	ArraySize: UINT;
	Format: DXGI_FORMAT;
	SampleDesc: DXGI_SAMPLE_DESC;
	Usage: D3D11_USAGE;
	BindFlags: D3D11_BIND_FLAG;
	CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
	MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

D3D11_TEXTURE3D_DESC :: struct
{
	Width: UINT;
	Height: UINT;
	Depth: UINT;
	MipLevels: UINT;
	Format: DXGI_FORMAT;
	Usage: D3D11_USAGE;
	BindFlags: D3D11_BIND_FLAG;
	CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
	MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

DXGI_ADAPTER_DESC :: struct
{
	Description: [128]WCHAR;
	VendorId: UINT;
	DeviceId: UINT;
	SubSysId: UINT;
	Revision: UINT;
	DedicatedVideoMemory: SIZE_T;
	DedicatedSystemMemory: SIZE_T;
	SharedSystemMemory: SIZE_T;
	AdapterLuid: LUID;
}

DXGI_FRAME_STATISTICS :: struct
{
	PresentCount: UINT;
	PresentRefreshCount: UINT;
	SyncRefreshCount: UINT;
	SyncQPCTime: LARGE_INTEGER;
	SyncGPUTime: LARGE_INTEGER;
}

DXGI_MAPPED_RECT :: struct
{
	Pitch: INT;
	pBits: ^BYTE;
}

DXGI_SURFACE_DESC :: struct
{
	Width: UINT;
	Height: UINT;
	Format: DXGI_FORMAT;
	SampleDesc: DXGI_SAMPLE_DESC;
}

DXGI_GAMMA_CONTROL_CAPABILITIES :: struct
{
	ScaleAndOffsetSupported: BOOL;
	MaxConvertedValue: FLOAT;
	MinConvertedValue: FLOAT;
	NumGammaControlPoints: UINT;
	ControlPointPositions: [1025]FLOAT;
}

DXGI_GAMMA_CONTROL :: struct
{
	Scale: DXGI_RGB;
	Offset: DXGI_RGB;
	GammaCurve: [1025]DXGI_RGB;
}

DXGI_RGB :: struct
{
	Red: FLOAT;
	Green: FLOAT;
	Blue: FLOAT;
}

DXGI_OUTPUT_DESC :: struct
{
	DeviceName: [32]WCHAR;
	DesktopCoordinates: RECT;
	AttachedToDesktop: BOOL;
	Rotation: DXGI_MODE_ROTATION;
	Monitor: HANDLE;
}

D3D11_BUFFER_DESC :: struct
{
	ByteWidth: UINT;
	Usage: D3D11_USAGE;
	BindFlags: D3D11_BIND_FLAG;
	CPUAccessFlags: D3D11_CPU_ACCESS_FLAG;
	MiscFlags: D3D11_RESOURCE_MISC_FLAG;
	StructureByteStride: UINT;
}

D3D11_SUBRESOURCE_DATA :: struct
{
	pSysMem: ^void;
	SysMemPitch: UINT;
	SysMemSlicePitch: UINT;
}

D3D11_SHADER_RESOURCE_VIEW_DESC :: struct
{
	Format: DXGI_FORMAT;
	ViewDimension: D3D11_SRV_DIMENSION;
	union {
		Buffer: D3D11_BUFFER_SRV;
		Texture1D: D3D11_TEX1D_SRV;
		Texture1DArray: D3D11_TEX1D_ARRAY_SRV;
		Texture2D: D3D11_TEX2D_SRV;
		Texture2DArray: D3D11_TEX2D_ARRAY_SRV;
		Texture2DMS: D3D11_TEX2DMS_SRV;
		Texture2DMSArray: D3D11_TEX2DMS_ARRAY_SRV;
		Texture3D: D3D11_TEX3D_SRV;
		TextureCube: D3D11_TEXCUBE_SRV;
		TextureCubeArray: D3D11_TEXCUBE_ARRAY_SRV;
		BufferEx: D3D11_BUFFEREX_SRV;
	};
}

D3D11_UNORDERED_ACCESS_VIEW_DESC :: struct
{
	Format: DXGI_FORMAT;
	ViewDimension: D3D11_UAV_DIMENSION;
	union {
		Buffer: D3D11_BUFFER_UAV;
		Texture1D: D3D11_TEX1D_UAV;
		Texture1DArray: D3D11_TEX1D_ARRAY_UAV;
		Texture2D: D3D11_TEX2D_UAV;
		Texture2DArray: D3D11_TEX2D_ARRAY_UAV;
		Texture3D: D3D11_TEX3D_UAV;
	};
}

D3D11_RENDER_TARGET_VIEW_DESC :: struct
{
	Format: DXGI_FORMAT;
	ViewDimension: D3D11_RTV_DIMENSION;
	union {
		Buffer: D3D11_BUFFER_RTV;
		Texture1D: D3D11_TEX1D_RTV;
		Texture1DArray: D3D11_TEX1D_ARRAY_RTV;
		Texture2D: D3D11_TEX2D_RTV;
		Texture2DArray: D3D11_TEX2D_ARRAY_RTV;
		Texture2DMS: D3D11_TEX2DMS_RTV;
		Texture2DMSArray: D3D11_TEX2DMS_ARRAY_RTV;
		Texture3D: D3D11_TEX3D_RTV;
	};
}

D3D11_DEPTH_STENCIL_VIEW_DESC :: struct
{
	Format: DXGI_FORMAT;
	ViewDimension: D3D11_DSV_DIMENSION;
	Flags: UINT;
	union {
		Texture1D: D3D11_TEX1D_DSV;
		Texture1DArray: D3D11_TEX1D_ARRAY_DSV;
		Texture2D: D3D11_TEX2D_DSV;
		Texture2DArray: D3D11_TEX2D_ARRAY_DSV;
		Texture2DMS: D3D11_TEX2DMS_DSV;
		Texture2DMSArray: D3D11_TEX2DMS_ARRAY_DSV;
	};
}

D3D11_INPUT_ELEMENT_DESC :: struct
{
	SemanticName: ^CHAR;
	SemanticIndex: UINT;
	Format: DXGI_FORMAT;
	InputSlot: UINT;
	AlignedByteOffset: UINT;
	InputSlotClass: D3D11_INPUT_CLASSIFICATION;
	InstanceDataStepRate: UINT;
}

D3D11_SO_DECLARATION_ENTRY :: struct
{
	Stream: UINT;
	SemanticName: ^CHAR;
	SemanticIndex: UINT;
	StartComponent: BYTE;
	ComponentCount: BYTE;
	OutputSlot: BYTE;
}

D3D11_DEPTH_STENCIL_DESC :: struct
{
	DepthEnable: BOOL;
	DepthWriteMask: D3D11_DEPTH_WRITE_MASK;
	DepthFunc: D3D11_COMPARISON_FUNC;
	StencilEnable: BOOL;
	StencilReadMask: UINT8;
	StencilWriteMask: UINT8;
	FrontFace: D3D11_DEPTH_STENCILOP_DESC;
	BackFace: D3D11_DEPTH_STENCILOP_DESC;
}

D3D11_RASTERIZER_DESC :: struct
{
	FillMode: D3D11_FILL_MODE;
	CullMode: D3D11_CULL_MODE;
	FrontCounterClockwise: BOOL;
	DepthBias: INT;
	DepthBiasClamp: FLOAT;
	SlopeScaledDepthBias: FLOAT;
	DepthClipEnable: BOOL;
	ScissorEnable: BOOL;
	MultisampleEnable: BOOL;
	AntialiasedLineEnable: BOOL;
}

D3D11_SAMPLER_DESC :: struct
{
	Filter: D3D11_FILTER;
	AddressU: D3D11_TEXTURE_ADDRESS_MODE;
	AddressV: D3D11_TEXTURE_ADDRESS_MODE;
	AddressW: D3D11_TEXTURE_ADDRESS_MODE;
	MipLODBias: FLOAT;
	MaxAnisotropy: UINT;
	ComparisonFunc: D3D11_COMPARISON_FUNC;
	BorderColor: [4] FLOAT;
	MinLOD: FLOAT;
	MaxLOD: FLOAT;
}

D3D11_QUERY_DESC :: struct
{
	Query: D3D11_QUERY;
	MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

D3D11_COUNTER_DESC :: struct
{
	Counter: D3D11_COUNTER;
	MiscFlags: D3D11_RESOURCE_MISC_FLAG;
}

D3D11_COUNTER_INFO :: struct
{
	LastDeviceDependentCounter: D3D11_COUNTER;
	NumSimultaneousCounters: UINT;
	NumDetectableParallelUnits: UINT8;
}

D3D11_BUFFER_SRV :: struct
{
	union {
		FirstElement: UINT;
		ElementOffset: UINT;
	};
	union {
		NumElements: UINT;
		ElementWidth: UINT;
	};
}

D3D11_TEX1D_SRV :: struct
{
	MostDetailedMip: UINT;
	MipLevels: UINT;
}

D3D11_BUFFER_UAV :: struct
{
	FirstElement: UINT;
	NumElements: UINT;
	Flags: UINT;
}

D3D11_TEX1D_UAV :: struct
{
	MipSlice: UINT;
}

D3D11_TEX1D_ARRAY_UAV :: struct
{
	MipSlice: UINT;
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX2D_UAV :: struct
{
	MipSlice: UINT;
}

D3D11_TEX2D_ARRAY_UAV :: struct
{
	MipSlice: UINT;
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX3D_UAV :: struct
{
	MipSlice: UINT;
	FirstWSlice: UINT;
	WSize: UINT;
}

D3D11_BUFFER_RTV :: struct
{
	union {
		FirstElement: UINT;
		ElementOffset: UINT;
	};
	union {
		NumElements: UINT;
		ElementWidth: UINT;
	};
}

D3D11_TEX1D_RTV :: struct
{
	MipSlice: UINT;
}

D3D11_TEX1D_ARRAY_RTV :: struct
{
	MipSlice: UINT;
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX2D_RTV :: struct
{
	MipSlice: UINT;
}

D3D11_TEX2D_ARRAY_RTV :: struct
{
	MipSlice: UINT;
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX2DMS_RTV :: struct
{
	UnusedField_NothingToDefine: UINT;
}

D3D11_TEX2DMS_ARRAY_RTV :: struct
{
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX3D_RTV :: struct
{
	MipSlice: UINT;
	FirstWSlice: UINT;
	WSize: UINT;
}

D3D11_TEX1D_ARRAY_SRV :: struct
{
	MostDetailedMip: UINT;
	MipLevels: UINT;
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX2D_SRV :: struct
{
	MostDetailedMip: UINT;
	MipLevels: UINT;
}

D3D11_TEX2D_ARRAY_SRV :: struct
{
	MostDetailedMip: UINT;
	MipLevels: UINT;
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX2DMS_SRV :: struct
{
	UnusedField_NothingToDefine: UINT;
}

D3D11_TEX2DMS_ARRAY_SRV :: struct
{
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX3D_SRV :: struct
{
	MostDetailedMip: UINT;
	MipLevels: UINT;
}

D3D11_TEXCUBE_SRV :: struct
{
	MostDetailedMip: UINT;
	MipLevels: UINT;
}

D3D11_TEXCUBE_ARRAY_SRV :: struct
{
	MostDetailedMip: UINT;
	MipLevels: UINT;
	First2DArrayFace: UINT;
	NumCubes: UINT;
}

D3D11_BUFFEREX_SRV :: struct
{
	FirstElement: UINT;
	NumElements: UINT;
	Flags: UINT;
}

D3D11_TEX1D_DSV :: struct
{
	MipSlice: UINT;
}

D3D11_TEX1D_ARRAY_DSV :: struct
{
	MipSlice: UINT;
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX2D_DSV :: struct
{
	MipSlice: UINT;
}

D3D11_TEX2D_ARRAY_DSV :: struct
{
	MipSlice: UINT;
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_TEX2DMS_DSV :: struct
{
	UnusedField_NothingToDefine: UINT;
}

D3D11_TEX2DMS_ARRAY_DSV :: struct
{
	FirstArraySlice: UINT;
	ArraySize: UINT;
}

D3D11_DEPTH_STENCILOP_DESC :: struct
{
	StencilFailOp: D3D11_STENCIL_OP;
	StencilDepthFailOp: D3D11_STENCIL_OP;
	StencilPassOp: D3D11_STENCIL_OP;
	StencilFunc: D3D11_COMPARISON_FUNC;
}

// Dumb types
REFGUID	:: #alias ^GUID;
REFIID	 :: #alias ^GUID;
D3D11_RECT :: #alias RECT;

// Enums
D3D11_CLEAR_FLAG :: enum : UINT
{
	D3D11_CLEAR_DEPTH = 0x1,
	D3D11_CLEAR_STENCIL = 0x2
}

D3D11_RESOURCE_MISC_FLAG :: enum : UINT
{
	D3D11_RESOURCE_MISC_GENERATE_MIPS = 0x1,
	D3D11_RESOURCE_MISC_SHARED = 0x2,
	D3D11_RESOURCE_MISC_TEXTURECUBE = 0x4,
	D3D11_RESOURCE_MISC_DRAWINDIRECT_ARGS = 0x10,
	D3D11_RESOURCE_MISC_BUFFER_ALLOW_RAW_VIEWS = 0x20,
	D3D11_RESOURCE_MISC_BUFFER_STRUCTURED = 0x40,
	D3D11_RESOURCE_MISC_RESOURCE_CLAMP = 0x80,
	D3D11_RESOURCE_MISC_SHARED_KEYEDMUTEX = 0x100,
	D3D11_RESOURCE_MISC_GDI_COMPATIBLE = 0x200,
	D3D11_RESOURCE_MISC_SHARED_NTHANDLE = 0x800,
	D3D11_RESOURCE_MISC_RESTRICTED_CONTENT = 0x1000,
	D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE = 0x2000,
	D3D11_RESOURCE_MISC_RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000,
	D3D11_RESOURCE_MISC_GUARDED = 0x8000,
	D3D11_RESOURCE_MISC_TILE_POOL = 0x20000,
	D3D11_RESOURCE_MISC_TILED = 0x40000,
	D3D11_RESOURCE_MISC_HW_PROTECTED = 0x80000,
	D3D11_RESOURCE_MISC_SHARED_DISPLAYABLE,
	D3D11_RESOURCE_MISC_SHARED_EXCLUSIVE_WRITER
}

D3D11_CPU_ACCESS_FLAG :: enum : UINT
{
	D3D11_CPU_ACCESS_WRITE = 0x10000,
	D3D11_CPU_ACCESS_READ  = 0x20000
}

D3D_INCLUDE_TYPE :: enum : UINT
{
	D3D_INCLUDE_LOCAL = 0,
	D3D_INCLUDE_SYSTEM,
	D3D10_INCLUDE_LOCAL,
	D3D10_INCLUDE_SYSTEM,
	D3D_INCLUDE_FORCE_DWORD = 0X7FFFFFFF
}

D3D11_BIND_FLAG :: enum : UINT
{
	D3D11_BIND_VERTEX_BUFFER = 0x1,
	D3D11_BIND_INDEX_BUFFER = 0x2,
	D3D11_BIND_CONSTANT_BUFFER = 0x4,
	D3D11_BIND_SHADER_RESOURCE = 0x8,
	D3D11_BIND_STREAM_OUTPUT = 0x10,
	D3D11_BIND_RENDER_TARGET = 0x20,
	D3D11_BIND_DEPTH_STENCIL = 0x40,
	D3D11_BIND_UNORDERED_ACCESS = 0x80,
	D3D11_BIND_DECODER = 0x200,
	D3D11_BIND_VIDEO_ENCODER = 0x400
}

D3D11_CREATE_DEVICE_FLAG :: enum : UINT
{
	D3D11_CREATE_DEVICE_SINGLETHREADED = 0x1,
	D3D11_CREATE_DEVICE_DEBUG = 0x2,
	D3D11_CREATE_DEVICE_SWITCH_TO_REF = 0x4,
	D3D11_CREATE_DEVICE_PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
	D3D11_CREATE_DEVICE_BGRA_SUPPORT = 0x20,
	D3D11_CREATE_DEVICE_DEBUGGABLE = 0x40,
	D3D11_CREATE_DEVICE_PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x80,
	D3D11_CREATE_DEVICE_DISABLE_GPU_TIMEOUT = 0x100,
	D3D11_CREATE_DEVICE_VIDEO_SUPPORT = 0x800
} ;

D3D11_DEVICE_CONTEXT_TYPE :: enum : UINT
{
	D3D11_DEVICE_CONTEXT_IMMEDIATE = 0,
	D3D11_DEVICE_CONTEXT_DEFERRED
}

D3D11_BLEND_OP :: enum : UINT
{
	D3D11_BLEND_OP_ADD = 1,
	D3D11_BLEND_OP_SUBTRACT = 2,
	D3D11_BLEND_OP_REV_SUBTRACT = 3,
	D3D11_BLEND_OP_MIN = 4,
	D3D11_BLEND_OP_MAX = 5
}

D3D11_BLEND :: enum : UINT
{
	D3D11_BLEND_ZERO = 1,
	D3D11_BLEND_ONE = 2,
	D3D11_BLEND_SRC_COLOR = 3,
	D3D11_BLEND_INV_SRC_COLOR = 4,
	D3D11_BLEND_SRC_ALPHA = 5,
	D3D11_BLEND_INV_SRC_ALPHA = 6,
	D3D11_BLEND_DEST_ALPHA = 7,
	D3D11_BLEND_INV_DEST_ALPHA = 8,
	D3D11_BLEND_DEST_COLOR = 9,
	D3D11_BLEND_INV_DEST_COLOR = 10,
	D3D11_BLEND_SRC_ALPHA_SAT = 11,
	D3D11_BLEND_BLEND_FACTOR = 14,
	D3D11_BLEND_INV_BLEND_FACTOR = 15,
	D3D11_BLEND_SRC1_COLOR = 16,
	D3D11_BLEND_INV_SRC1_COLOR = 17,
	D3D11_BLEND_SRC1_ALPHA = 18,
	D3D11_BLEND_INV_SRC1_ALPHA = 19
}

D3D11_PRIMITIVE_TOPOLOGY :: enum : UINT
{
	D3D_PRIMITIVE_TOPOLOGY_UNDEFINED		= 0,
	D3D_PRIMITIVE_TOPOLOGY_POINTLIST		= 1,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST			= 2,
	D3D_PRIMITIVE_TOPOLOGY_LINESTRIP		= 3,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST		= 4,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= 5,
	D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ		= 10,
	D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= 11,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= 12,
	D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= 13,
	D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= 33,
	D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= 34,
	D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= 35,
	D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= 36,
	D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= 37,
	D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= 38,
	D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= 39,
	D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= 40,
	D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= 41,
	D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= 42,
	D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= 43,
	D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= 44,
	D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= 45,
	D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= 46,
	D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= 47,
	D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= 48,
	D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= 49,
	D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= 50,
	D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= 51,
	D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= 52,
	D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= 53,
	D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= 54,
	D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= 55,
	D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= 56,
	D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= 57,
	D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= 58,
	D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= 59,
	D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= 60,
	D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= 61,
	D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= 62,
	D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= 63,
	D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= 64,
	D3D10_PRIMITIVE_TOPOLOGY_UNDEFINED	= D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D10_PRIMITIVE_TOPOLOGY_POINTLIST	= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D10_PRIMITIVE_TOPOLOGY_LINELIST	= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
	D3D10_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
	D3D10_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_UNDEFINED	= D3D_PRIMITIVE_TOPOLOGY_UNDEFINED,
	D3D11_PRIMITIVE_TOPOLOGY_POINTLIST	= D3D_PRIMITIVE_TOPOLOGY_POINTLIST,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST	= D3D_PRIMITIVE_TOPOLOGY_LINELIST,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP,
	D3D11_PRIMITIVE_TOPOLOGY_LINELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINELIST_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_LINESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ	= D3D_PRIMITIVE_TOPOLOGY_TRIANGLESTRIP_ADJ,
	D3D11_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_1_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_2_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_3_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_4_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_5_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_6_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_7_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_8_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_9_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_10_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_11_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_12_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_13_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_14_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_15_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_16_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_17_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_18_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_19_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_20_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_21_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_22_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_23_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_24_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_25_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_26_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_27_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_28_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_29_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_30_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_31_CONTROL_POINT_PATCHLIST,
	D3D11_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST	= D3D_PRIMITIVE_TOPOLOGY_32_CONTROL_POINT_PATCHLIST
}

D3D11_MAP :: enum : UINT
{
	D3D11_MAP_READ = 1,
	D3D11_MAP_WRITE = 2,
	D3D11_MAP_READ_WRITE = 3,
	D3D11_MAP_WRITE_DISCARD = 4,
	D3D11_MAP_WRITE_NO_OVERWRITE = 5
}

D3D11_RESOURCE_DIMENSION :: enum : UINT
{
	D3D11_RESOURCE_DIMENSION_UNKNOWN = 0,
	D3D11_RESOURCE_DIMENSION_BUFFER = 1,
	D3D11_RESOURCE_DIMENSION_TEXTURE1D = 2,
	D3D11_RESOURCE_DIMENSION_TEXTURE2D = 3,
	D3D11_RESOURCE_DIMENSION_TEXTURE3D = 4
}

D3D_DRIVER_TYPE :: enum : UINT
{
	D3D_DRIVER_TYPE_UNKNOWN = 0,
	D3D_DRIVER_TYPE_HARDWARE,
	D3D_DRIVER_TYPE_REFERENCE,
	D3D_DRIVER_TYPE_NULL,
	D3D_DRIVER_TYPE_SOFTWARE,
	D3D_DRIVER_TYPE_WARP
}

DXGI_MODE_ROTATION :: enum : UINT
{
	DXGI_MODE_ROTATION_UNSPECIFIED = 0,
	DXGI_MODE_ROTATION_IDENTITY	= 1,
	DXGI_MODE_ROTATION_ROTATE90	= 2,
	DXGI_MODE_ROTATION_ROTATE180   = 3,
	DXGI_MODE_ROTATION_ROTATE270   = 4
}

DXGI_FORMAT :: enum : UINT
{
	DXGI_FORMAT_UNKNOWN = 0,
	DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
	DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
	DXGI_FORMAT_R32G32B32A32_UINT = 3,
	DXGI_FORMAT_R32G32B32A32_SINT = 4,
	DXGI_FORMAT_R32G32B32_TYPELESS = 5,
	DXGI_FORMAT_R32G32B32_FLOAT = 6,
	DXGI_FORMAT_R32G32B32_UINT = 7,
	DXGI_FORMAT_R32G32B32_SINT = 8,
	DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
	DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
	DXGI_FORMAT_R16G16B16A16_UNORM = 11,
	DXGI_FORMAT_R16G16B16A16_UINT = 12,
	DXGI_FORMAT_R16G16B16A16_SNORM = 13,
	DXGI_FORMAT_R16G16B16A16_SINT = 14,
	DXGI_FORMAT_R32G32_TYPELESS = 15,
	DXGI_FORMAT_R32G32_FLOAT = 16,
	DXGI_FORMAT_R32G32_UINT = 17,
	DXGI_FORMAT_R32G32_SINT = 18,
	DXGI_FORMAT_R32G8X24_TYPELESS = 19,
	DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
	DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
	DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
	DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
	DXGI_FORMAT_R10G10B10A2_UNORM = 24,
	DXGI_FORMAT_R10G10B10A2_UINT = 25,
	DXGI_FORMAT_R11G11B10_FLOAT = 26,
	DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
	DXGI_FORMAT_R8G8B8A8_UNORM = 28,
	DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
	DXGI_FORMAT_R8G8B8A8_UINT = 30,
	DXGI_FORMAT_R8G8B8A8_SNORM = 31,
	DXGI_FORMAT_R8G8B8A8_SINT = 32,
	DXGI_FORMAT_R16G16_TYPELESS = 33,
	DXGI_FORMAT_R16G16_FLOAT = 34,
	DXGI_FORMAT_R16G16_UNORM = 35,
	DXGI_FORMAT_R16G16_UINT = 36,
	DXGI_FORMAT_R16G16_SNORM = 37,
	DXGI_FORMAT_R16G16_SINT = 38,
	DXGI_FORMAT_R32_TYPELESS = 39,
	DXGI_FORMAT_D32_FLOAT = 40,
	DXGI_FORMAT_R32_FLOAT = 41,
	DXGI_FORMAT_R32_UINT = 42,
	DXGI_FORMAT_R32_SINT = 43,
	DXGI_FORMAT_R24G8_TYPELESS = 44,
	DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
	DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
	DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
	DXGI_FORMAT_R8G8_TYPELESS = 48,
	DXGI_FORMAT_R8G8_UNORM = 49,
	DXGI_FORMAT_R8G8_UINT = 50,
	DXGI_FORMAT_R8G8_SNORM = 51,
	DXGI_FORMAT_R8G8_SINT = 52,
	DXGI_FORMAT_R16_TYPELESS = 53,
	DXGI_FORMAT_R16_FLOAT = 54,
	DXGI_FORMAT_D16_UNORM = 55,
	DXGI_FORMAT_R16_UNORM = 56,
	DXGI_FORMAT_R16_UINT = 57,
	DXGI_FORMAT_R16_SNORM = 58,
	DXGI_FORMAT_R16_SINT = 59,
	DXGI_FORMAT_R8_TYPELESS = 60,
	DXGI_FORMAT_R8_UNORM = 61,
	DXGI_FORMAT_R8_UINT = 62,
	DXGI_FORMAT_R8_SNORM = 63,
	DXGI_FORMAT_R8_SINT = 64,
	DXGI_FORMAT_A8_UNORM = 65,
	DXGI_FORMAT_R1_UNORM = 66,
	DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
	DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
	DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
	DXGI_FORMAT_BC1_TYPELESS = 70,
	DXGI_FORMAT_BC1_UNORM = 71,
	DXGI_FORMAT_BC1_UNORM_SRGB = 72,
	DXGI_FORMAT_BC2_TYPELESS = 73,
	DXGI_FORMAT_BC2_UNORM = 74,
	DXGI_FORMAT_BC2_UNORM_SRGB = 75,
	DXGI_FORMAT_BC3_TYPELESS = 76,
	DXGI_FORMAT_BC3_UNORM = 77,
	DXGI_FORMAT_BC3_UNORM_SRGB = 78,
	DXGI_FORMAT_BC4_TYPELESS = 79,
	DXGI_FORMAT_BC4_UNORM = 80,
	DXGI_FORMAT_BC4_SNORM = 81,
	DXGI_FORMAT_BC5_TYPELESS = 82,
	DXGI_FORMAT_BC5_UNORM = 83,
	DXGI_FORMAT_BC5_SNORM = 84,
	DXGI_FORMAT_B5G6R5_UNORM = 85,
	DXGI_FORMAT_B5G5R5A1_UNORM = 86,
	DXGI_FORMAT_B8G8R8A8_UNORM = 87,
	DXGI_FORMAT_B8G8R8X8_UNORM = 88,
	DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
	DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
	DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
	DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
	DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
	DXGI_FORMAT_BC6H_TYPELESS = 94,
	DXGI_FORMAT_BC6H_UF16 = 95,
	DXGI_FORMAT_BC6H_SF16 = 96,
	DXGI_FORMAT_BC7_TYPELESS = 97,
	DXGI_FORMAT_BC7_UNORM = 98,
	DXGI_FORMAT_BC7_UNORM_SRGB = 99,
	DXGI_FORMAT_AYUV = 100,
	DXGI_FORMAT_Y410 = 101,
	DXGI_FORMAT_Y416 = 102,
	DXGI_FORMAT_NV12 = 103,
	DXGI_FORMAT_P010 = 104,
	DXGI_FORMAT_P016 = 105,
	DXGI_FORMAT_420_OPAQUE = 106,
	DXGI_FORMAT_YUY2 = 107,
	DXGI_FORMAT_Y210 = 108,
	DXGI_FORMAT_Y216 = 109,
	DXGI_FORMAT_NV11 = 110,
	DXGI_FORMAT_AI44 = 111,
	DXGI_FORMAT_IA44 = 112,
	DXGI_FORMAT_P8 = 113,
	DXGI_FORMAT_A8P8 = 114,
	DXGI_FORMAT_B4G4R4A4_UNORM = 115,
	DXGI_FORMAT_P208 = 130,
	DXGI_FORMAT_V208 = 131,
	DXGI_FORMAT_V408 = 132,
	DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE,
	DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE,
	DXGI_FORMAT_FORCE_UINT = 0xffffffff
}

D3D11_FILTER :: enum : UINT
{
	D3D11_FILTER_MIN_MAG_MIP_POINT = 0,
	D3D11_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
	D3D11_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
	D3D11_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
	D3D11_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
	D3D11_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
	D3D11_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
	D3D11_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
	D3D11_FILTER_ANISOTROPIC = 0x55,
	D3D11_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
	D3D11_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
	D3D11_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
	D3D11_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
	D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
	D3D11_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
	D3D11_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
	D3D11_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
	D3D11_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
	D3D11_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
	D3D11_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
	D3D11_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
	D3D11_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
	D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
	D3D11_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
	D3D11_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
	D3D11_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
	D3D11_FILTER_MINIMUM_ANISOTROPIC = 0x155,
	D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
	D3D11_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
	D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
	D3D11_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
	D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
	D3D11_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
	D3D11_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
	D3D11_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
	D3D11_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
}

D3D11_COUNTER_TYPE :: enum : UINT
{
	D3D11_COUNTER_TYPE_FLOAT32 = 0,
	D3D11_COUNTER_TYPE_UINT16  = 1,
	D3D11_COUNTER_TYPE_UINT32  = 2,
	D3D11_COUNTER_TYPE_UINT64  = 3
}

D3D11_FEATURE :: enum : UINT
{
	D3D11_FEATURE_THREADING = 0,
	D3D11_FEATURE_DOUBLES,
	D3D11_FEATURE_FORMAT_SUPPORT,
	D3D11_FEATURE_FORMAT_SUPPORT2,
	D3D11_FEATURE_D3D10_X_HARDWARE_OPTIONS,
	D3D11_FEATURE_D3D11_OPTIONS,
	D3D11_FEATURE_ARCHITECTURE_INFO,
	D3D11_FEATURE_D3D9_OPTIONS,
	D3D11_FEATURE_SHADER_MIN_PRECISION_SUPPORT,
	D3D11_FEATURE_D3D9_SHADOW_SUPPORT,
	D3D11_FEATURE_D3D11_OPTIONS1,
	D3D11_FEATURE_D3D9_SIMPLE_INSTANCING_SUPPORT,
	D3D11_FEATURE_MARKER_SUPPORT,
	D3D11_FEATURE_D3D9_OPTIONS1,
	D3D11_FEATURE_D3D11_OPTIONS2,
	D3D11_FEATURE_D3D11_OPTIONS3,
	D3D11_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT,
	D3D11_FEATURE_D3D11_OPTIONS4,
	D3D11_FEATURE_SHADER_CACHE,
	D3D11_FEATURE_D3D11_OPTIONS5,
	D3D11_FEATURE_DISPLAYABLE
}

D3D11_FILL_MODE :: enum : UINT
{
	D3D11_FILL_WIREFRAME = 2,
	D3D11_FILL_SOLID = 3
}

D3D11_CULL_MODE :: enum : UINT
{
	D3D11_CULL_NONE = 1,
	D3D11_CULL_FRONT = 2,
	D3D11_CULL_BACK = 3
}

D3D11_USAGE :: enum : UINT
{
	D3D11_USAGE_DEFAULT = 0,
	D3D11_USAGE_IMMUTABLE = 1,
	D3D11_USAGE_DYNAMIC = 2,
	D3D11_USAGE_STAGING = 3
}

D3D11_TEXTURE_ADDRESS_MODE :: enum : UINT
{
	D3D11_TEXTURE_ADDRESS_WRAP = 1,
	D3D11_TEXTURE_ADDRESS_MIRROR = 2,
	D3D11_TEXTURE_ADDRESS_CLAMP = 3,
	D3D11_TEXTURE_ADDRESS_BORDER = 4,
	D3D11_TEXTURE_ADDRESS_MIRROR_ONCE = 5
}

D3D11_INPUT_CLASSIFICATION :: enum : UINT
{
	D3D11_INPUT_PER_VERTEX_DATA = 0,
	D3D11_INPUT_PER_INSTANCE_DATA = 1
}

D3D11_STENCIL_OP :: enum : UINT
{
	D3D11_STENCIL_OP_KEEP = 1,
	D3D11_STENCIL_OP_ZERO = 2,
	D3D11_STENCIL_OP_REPLACE = 3,
	D3D11_STENCIL_OP_INCR_SAT = 4,
	D3D11_STENCIL_OP_DECR_SAT = 5,
	D3D11_STENCIL_OP_INVERT = 6,
	D3D11_STENCIL_OP_INCR = 7,
	D3D11_STENCIL_OP_DECR = 8
}

D3D11_QUERY :: enum : UINT
{
	D3D11_QUERY_EVENT = 0,
	D3D11_QUERY_OCCLUSION,
	D3D11_QUERY_TIMESTAMP,
	D3D11_QUERY_TIMESTAMP_DISJOINT,
	D3D11_QUERY_PIPELINE_STATISTICS,
	D3D11_QUERY_OCCLUSION_PREDICATE,
	D3D11_QUERY_SO_STATISTICS,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE,
	D3D11_QUERY_SO_STATISTICS_STREAM0,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM0,
	D3D11_QUERY_SO_STATISTICS_STREAM1,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM1,
	D3D11_QUERY_SO_STATISTICS_STREAM2,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM2,
	D3D11_QUERY_SO_STATISTICS_STREAM3,
	D3D11_QUERY_SO_OVERFLOW_PREDICATE_STREAM3
}

D3D11_DEPTH_WRITE_MASK :: enum : UINT
{
	D3D11_DEPTH_WRITE_MASK_ZERO = 0,
	D3D11_DEPTH_WRITE_MASK_ALL = 1
}

D3D11_COUNTER :: enum : UINT
{
	D3D11_COUNTER_DEVICE_DEPENDENT_0 = 0x40000000
}

D3D11_COMPARISON_FUNC :: enum : UINT
{
	D3D11_COMPARISON_NEVER = 1,
	D3D11_COMPARISON_LESS = 2,
	D3D11_COMPARISON_EQUAL = 3,
	D3D11_COMPARISON_LESS_EQUAL = 4,
	D3D11_COMPARISON_GREATER = 5,
	D3D11_COMPARISON_NOT_EQUAL = 6,
	D3D11_COMPARISON_GREATER_EQUAL = 7,
	D3D11_COMPARISON_ALWAYS = 8
}

D3D11_UAV_DIMENSION :: enum : UINT
{
	D3D11_UAV_DIMENSION_UNKNOWN = 0,
	D3D11_UAV_DIMENSION_BUFFER = 1,
	D3D11_UAV_DIMENSION_TEXTURE1D = 2,
	D3D11_UAV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D11_UAV_DIMENSION_TEXTURE2D = 4,
	D3D11_UAV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D11_UAV_DIMENSION_TEXTURE3D = 8
}

D3D11_RTV_DIMENSION :: enum : UINT
{
	D3D11_RTV_DIMENSION_UNKNOWN = 0,
	D3D11_RTV_DIMENSION_BUFFER = 1,
	D3D11_RTV_DIMENSION_TEXTURE1D = 2,
	D3D11_RTV_DIMENSION_TEXTURE1DARRAY = 3,
	D3D11_RTV_DIMENSION_TEXTURE2D = 4,
	D3D11_RTV_DIMENSION_TEXTURE2DARRAY = 5,
	D3D11_RTV_DIMENSION_TEXTURE2DMS = 6,
	D3D11_RTV_DIMENSION_TEXTURE2DMSARRAY = 7,
	D3D11_RTV_DIMENSION_TEXTURE3D = 8
}

D3D11_SRV_DIMENSION :: enum : UINT
{
	D3D11_SRV_DIMENSION_UNKNOWN		   = 0,
	D3D11_SRV_DIMENSION_BUFFER			= 1,
	D3D11_SRV_DIMENSION_TEXTURE1D		 = 2,
	D3D11_SRV_DIMENSION_TEXTURE1DARRAY	= 3,
	D3D11_SRV_DIMENSION_TEXTURE2D		 = 4,
	D3D11_SRV_DIMENSION_TEXTURE2DARRAY	= 5,
	D3D11_SRV_DIMENSION_TEXTURE2DMS	   = 6,
	D3D11_SRV_DIMENSION_TEXTURE2DMSARRAY  = 7,
	D3D11_SRV_DIMENSION_TEXTURE3D		 = 8,
	D3D11_SRV_DIMENSION_TEXTURECUBE	   = 9,
	D3D11_SRV_DIMENSION_TEXTURECUBEARRAY  = 10,
	D3D11_SRV_DIMENSION_BUFFEREX		  = 11
}

D3D11_DSV_DIMENSION :: enum : UINT
{
	D3D11_DSV_DIMENSION_UNKNOWN = 0,
	D3D11_DSV_DIMENSION_TEXTURE1D = 1,
	D3D11_DSV_DIMENSION_TEXTURE1DARRAY = 2,
	D3D11_DSV_DIMENSION_TEXTURE2D = 3,
	D3D11_DSV_DIMENSION_TEXTURE2DARRAY = 4,
	D3D11_DSV_DIMENSION_TEXTURE2DMS = 5,
	D3D11_DSV_DIMENSION_TEXTURE2DMSARRAY = 6
}

D3D_FEATURE_LEVEL :: enum : UINT
{
	D3D_FEATURE_LEVEL_1_0_CORE,
	D3D_FEATURE_LEVEL_9_1,
	D3D_FEATURE_LEVEL_9_2,
	D3D_FEATURE_LEVEL_9_3,
	D3D_FEATURE_LEVEL_10_0,
	D3D_FEATURE_LEVEL_10_1,
	D3D_FEATURE_LEVEL_11_0,
	D3D_FEATURE_LEVEL_11_1,
	D3D_FEATURE_LEVEL_12_0,
	D3D_FEATURE_LEVEL_12_1,
	D3D_FEATURE_LEVEL_12_2
}

DXGI_MODE_SCANLINE_ORDER :: enum : UINT
{
	DXGI_MODE_SCANLINE_ORDER_UNSPECIFIED	   = 0,
	DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE	   = 1,
	DXGI_MODE_SCANLINE_ORDER_UPPER_FIELD_FIRST = 2,
	DXGI_MODE_SCANLINE_ORDER_LOWER_FIELD_FIRST = 3
}

DXGI_MODE_SCALING :: enum : UINT
{
	DXGI_MODE_SCALING_UNSPECIFIED = 0,
	DXGI_MODE_SCALING_CENTERED	= 1,
	DXGI_MODE_SCALING_STRETCHED   = 2
}

DXGI_SWAP_EFFECT :: enum : UINT
{
	DXGI_SWAP_EFFECT_DISCARD = 0,
	DXGI_SWAP_EFFECT_SEQUENTIAL = 1,
	DXGI_SWAP_EFFECT_FLIP_SEQUENTIAL = 3,
	DXGI_SWAP_EFFECT_FLIP_DISCARD = 4
}

DXGI_SWAP_CHAIN_FLAG :: enum : UINT
{
	DXGI_SWAP_CHAIN_FLAG_NONPREROTATED = 1,
	DXGI_SWAP_CHAIN_FLAG_ALLOW_MODE_SWITCH = 2,
	DXGI_SWAP_CHAIN_FLAG_GDI_COMPATIBLE = 4,
	DXGI_SWAP_CHAIN_FLAG_RESTRICTED_CONTENT = 8,
	DXGI_SWAP_CHAIN_FLAG_RESTRICT_SHARED_RESOURCE_DRIVER = 16,
	DXGI_SWAP_CHAIN_FLAG_DISPLAY_ONLY = 32,
	DXGI_SWAP_CHAIN_FLAG_FRAME_LATENCY_WAITABLE_OBJECT = 64,
	DXGI_SWAP_CHAIN_FLAG_FOREGROUND_LAYER = 128,
	DXGI_SWAP_CHAIN_FLAG_FULLSCREEN_VIDEO = 256,
	DXGI_SWAP_CHAIN_FLAG_YUV_VIDEO = 512,
	DXGI_SWAP_CHAIN_FLAG_HW_PROTECTED = 1024,
	DXGI_SWAP_CHAIN_FLAG_ALLOW_TEARING = 2048,
	DXGI_SWAP_CHAIN_FLAG_RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS = 4096
}

DXGI_USAGE :: UINT;
DXGI_USAGE_SHADER_INPUT			:: 1 << 4;
DXGI_USAGE_RENDER_TARGET_OUTPUT :: 1 << 5;
DXGI_USAGE_BACK_BUFFER			:: 1 << 6;
DXGI_USAGE_SHARED				:: 1 << 7;
DXGI_USAGE_READ_ONLY			:: 1 << 8;
DXGI_USAGE_DISCARD_ON_PRESENT	:: 1 << 9;
DXGI_USAGE_UNORDERED_ACCESS		:: 1 << 10;

// Structs
D3D11_BOX :: struct
{
	left: UINT;
	top: UINT;
	front: UINT;
	right: UINT;
	bottom: UINT;
	back: UINT;
}

D3D11_BLEND_DESC :: struct
{
	AlphaToCoverageEnable: BOOL;
	IndependentBlendEnable: BOOL;
	RenderTarget: [8]D3D11_RENDER_TARGET_BLEND_DESC;
}

D3D11_RENDER_TARGET_BLEND_DESC :: struct
{
	BlendEnable: BOOL;
	SrcBlend: D3D11_BLEND;
	DestBlend: D3D11_BLEND;
	BlendOp: D3D11_BLEND_OP;
	SrcBlendAlpha: D3D11_BLEND;
	DestBlendAlpha: D3D11_BLEND;
	BlendOpAlpha: D3D11_BLEND_OP;
	RenderTargetWriteMask: UINT8;
}

DXGI_RATIONAL :: struct
{
	Numerator : UINT;
	Denominator : UINT;
}

DXGI_SWAP_CHAIN_DESC :: struct
{
	BufferDesc: DXGI_MODE_DESC;
	SampleDesc: DXGI_SAMPLE_DESC;
	BufferUsage: DXGI_USAGE;
	BufferCount: UINT;
	OutputWindow: HANDLE;
	Windowed: BOOL;
	SwapEffect: DXGI_SWAP_EFFECT;
	Flags: DXGI_SWAP_CHAIN_FLAG;
}

DXGI_MODE_DESC :: struct
{
	Width: UINT;
	Height: UINT;
	RefreshRate: DXGI_RATIONAL;
	Format: DXGI_FORMAT;
	ScanlineOrdering: DXGI_MODE_SCANLINE_ORDER;
	Scaling: DXGI_MODE_SCALING;
}

DXGI_SAMPLE_DESC :: struct
{
	Count : UINT;
	Quality : UINT;
}

// Procedures
D3D11CreateDeviceAndSwapChain :: #external #convention(win64) (
	pAdapter: ^IDXGIAdapter,
	DriverType: D3D_DRIVER_TYPE,
	Software: HANDLE,
	Flags: D3D11_CREATE_DEVICE_FLAG,
	pFeatureLevels: ^D3D_FEATURE_LEVEL,
	FeatureLevels: UINT,
	SDKVersion: UINT,
	pSwapChainDesc: ^DXGI_SWAP_CHAIN_DESC,
	ppSwapChain: ^^IDXGISwapChain,
	ppDevice: ^^ID3D11Device,
	pFeatureLevel: ^D3D_FEATURE_LEVEL,
	ppImmediateContext: ^^ID3D11DeviceContext
) -> HRESULT;

D3DCompileFromFile :: #external #convention(win64) (
	pFileName: ^WCHAR,
	pDefines: ^D3D_SHADER_MACRO,
	pInclude: ^ID3DInclude,
	pEntrypoint: ^CHAR,
	pTarget: ^CHAR,
	Flags1: UINT,
	Flags2: UINT,
	ppCode: ^^ID3DBlob,
	ppErrorMsgs: ^^ID3DBlob
) -> HRESULT;

// Interfaces. Here is where I lose my shit
IUnknown :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^IUnknown,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) ( 
			this: ^IUnknown
		) -> ULONG;
		Release: #convention(win64) ( 
			this: ^IUnknown
		) -> ULONG;
	};
}

ID3D11Device :: struct
{
	vtbl : ^struct {
		QueryInterface : #convention(win64) (
			this: ^ID3D11Device,
			riid: REFGUID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef : #convention(win64) (
			this: ^ID3D11Device
		) -> ULONG;
		Release : #convention(win64) (
			this: ^ID3D11Device
		) -> ULONG;
		CreateBuffer : #convention(win64) (
			this: ^ID3D11Device,
			pDesc: ^D3D11_BUFFER_DESC,
			pInitialData: ^D3D11_SUBRESOURCE_DATA,
			ppBuffer: ^^ID3D11Buffer = 0
		) -> HRESULT;
		CreateTexture1D : #convention(win64) (
			this: ^ID3D11Device,
			pDesc: ^D3D11_TEXTURE1D_DESC,
			pInitialData: ^D3D11_SUBRESOURCE_DATA,
			ppTexture1D: ^^ID3D11Texture1D = 0
		) -> HRESULT;
		CreateTexture2D : #convention(win64) (
			this: ^ID3D11Device,
			pDesc: ^D3D11_TEXTURE2D_DESC,
			pInitialData: ^D3D11_SUBRESOURCE_DATA,
			ppTexture2D: ^^ID3D11Texture2D = 0
		) -> HRESULT;
		CreateTexture3D : #convention(win64) (
			this: ^ID3D11Device,
			pDesc: ^D3D11_TEXTURE3D_DESC,
			pInitialData: ^D3D11_SUBRESOURCE_DATA,
			ppTexture2D: ^^ID3D11Texture3D = 0
		) -> HRESULT;
		CreateShaderResourceView : #convention(win64) (
			this: ^ID3D11Device,
			pResource: ^ID3D11Resource,
			pDesc: ^D3D11_SHADER_RESOURCE_VIEW_DESC,
			ppSRView: ^^ID3D11ShaderResourceView = 0
		) -> HRESULT;
		CreateUnorderedAccessView : #convention(win64) (
			this: ^ID3D11Device,
			pResource: ^ID3D11Resource,
			pDesc: ^D3D11_UNORDERED_ACCESS_VIEW_DESC,
			ppUAView: ^^ID3D11UnorderedAccessView = 0
		) -> HRESULT;
		CreateRenderTargetView : #convention(win64) (
			this: ^ID3D11Device,
			pResource: ^ID3D11Resource,
			pDesc: ^D3D11_RENDER_TARGET_VIEW_DESC,
			ppRTView: ^^ID3D11RenderTargetView = 0
		) -> HRESULT;
		CreateDepthStencilView : #convention(win64) (
			this: ^ID3D11Device,
			pResource: ^ID3D11Resource,
			pDesc: ^D3D11_DEPTH_STENCIL_VIEW_DESC,
			ppDepthStencilView: ^^ID3D11DepthStencilView = 0
		) -> HRESULT;
		CreateInputLayout : #convention(win64) (
			this: ^ID3D11Device,
			pInputElementDescs: ^D3D11_INPUT_ELEMENT_DESC,
			NumElements: UINT,
			pShaderBytecodeWithInputSignature: ^void,
			BytecodeLength: SIZE_T,
			ppInputLayout: ^^ID3D11InputLayout = 0
		) -> HRESULT;
		CreateVertexShader : #convention(win64) (
			this: ^ID3D11Device,
			pShaderBytecode: ^void,
			BytecodeLength: SIZE_T,
			pClassLinkage: ^ID3D11ClassLinkage,
			ppVertexShader: ^^ID3D11VertexShader = 0
		) -> HRESULT;
		CreateGeometryShader : #convention(win64) (
			this: ^ID3D11Device,
			pShaderBytecode: ^void,
			BytecodeLength: SIZE_T,
			pClassLinkage: ^ID3D11ClassLinkage,
			ppGeometryShader: ^^ID3D11GeometryShader = 0
		) -> HRESULT;
		CreateGeometryShaderWithStreamOutput : #convention(win64) (
			this: ^ID3D11Device,
			pShaderBytecode: ^void,
			BytecodeLength: SIZE_T,
			pSODeclaration: ^D3D11_SO_DECLARATION_ENTRY,
			NumEntries: UINT,
			pBufferStrides: ^UINT,
			NumStrides: UINT,
			RasterizedStream: UINT,
			pClassLinkage: ^ID3D11ClassLinkage,
			ppGeometryShader: ^^ID3D11GeometryShader = 0
		) -> HRESULT;
		CreatePixelShader : #convention(win64) (
			this: ^ID3D11Device,
			pShaderBytecode: ^void,
			BytecodeLength: SIZE_T,
			pClassLinkage: ^ID3D11ClassLinkage,
			ppPixelShader: ^^ID3D11PixelShader = 0
		) -> HRESULT;
		CreateHullShader : #convention(win64) (
			this: ^ID3D11Device,
			pShaderBytecode: ^void,
			BytecodeLength: SIZE_T,
			pClassLinkage: ^ID3D11ClassLinkage,
			ppHullShader: ^^ID3D11HullShader = 0
		) -> HRESULT;
		CreateDomainShader : #convention(win64) (
			this: ^ID3D11Device,
			pShaderBytecode: ^void,
			BytecodeLength: SIZE_T,
			pClassLinkage: ^ID3D11ClassLinkage,
			ppDomainShader: ^^ID3D11DomainShader = 0
		) -> HRESULT;
		CreateComputeShader : #convention(win64) (
			this: ^ID3D11Device,
			pShaderBytecode: ^void,
			BytecodeLength: SIZE_T,
			pClassLinkage: ^ID3D11ClassLinkage,
			ppComputeShader: ^^ID3D11ComputeShader = 0
		) -> HRESULT;
		CreateClassLinkage : #convention(win64) (
			this: ^ID3D11Device,
			ppLinkage: ^^ID3D11ClassLinkage = 0
		) -> HRESULT;
		CreateBlendState : #convention(win64) (
			this: ^ID3D11Device,
			pBlendStateDesc: ^D3D11_BLEND_DESC,
			ppBlendState: ^^ID3D11BlendState = 0
		) -> HRESULT;
		CreateDepthStencilState : #convention(win64) (
			this: ^ID3D11Device,
			pDepthStencilDesc: ^D3D11_DEPTH_STENCIL_DESC,
			ppDepthStencilState: ^^ID3D11DepthStencilState = 0
		) -> HRESULT;
		CreateRasterizerState : #convention(win64) (
			this: ^ID3D11Device,
			pRasterizerDesc: ^D3D11_RASTERIZER_DESC,
			ppRasterizerState: ^^ID3D11RasterizerState = 0
		) -> HRESULT;
		CreateSamplerState : #convention(win64) (
			this: ^ID3D11Device,
			pSamplerDesc: ^D3D11_SAMPLER_DESC,
			ppSamplerState: ^^ID3D11SamplerState = 0
		) -> HRESULT;
		CreateQuery : #convention(win64) (
			this: ^ID3D11Device,
			pQueryDesc: ^D3D11_QUERY_DESC,
			ppQuery: ^^ID3D11Query = 0
		) -> HRESULT;
		CreatePredicate : #convention(win64) (
			this: ^ID3D11Device,
			pPredicateDesc: ^D3D11_QUERY_DESC,
			ppPredicate: ^^ID3D11Predicate = 0
		) -> HRESULT;
		CreateCounter : #convention(win64) (
			this: ^ID3D11Device,
			pCounterDesc: ^D3D11_COUNTER_DESC,
			ppCounter: ^^ID3D11Counter = 0
		) -> HRESULT;
		CreateDeferredContext : #convention(win64) (
			this: ^ID3D11Device,
			ContextFlags: UINT,
			ppDeferredContext: ^^ID3D11DeviceContext = 0
		) -> HRESULT;
		OpenSharedResource : #convention(win64) (
			this: ^ID3D11Device,
			hResource: HANDLE,
			ReturnedInterface: REFIID,
			ppResource: ^^void = 0
		) -> HRESULT;
		CheckFormatSupport : #convention(win64) (
			this: ^ID3D11Device,
			Format: DXGI_FORMAT,
			pFormatSupport: ^UINT = 0
		) -> HRESULT;
		CheckMultisampleQualityLevels : #convention(win64) (
			this: ^ID3D11Device,
			Format: DXGI_FORMAT,
			SampleCount: UINT,
			pNumQualityLevels: ^UINT = 0
		) -> HRESULT;
		CheckCounterInfo : #convention(win64) (
			this: ^ID3D11Device,
			pCounterInfo: ^D3D11_COUNTER_INFO = 0
		);
		CheckCounter : #convention(win64) (
			this: ^ID3D11Device,
			pDesc: ^D3D11_COUNTER_DESC,
			pType: ^D3D11_COUNTER_TYPE,
			pActiveCounters: ^UINT,
			szName: ^CHAR,
			pNameLength: ^UINT,
			szUnits: ^CHAR,
			pUnitsLength: ^UINT,
			szDescription: ^CHAR,
			pDescriptionLength: ^UINT = 0
		) -> HRESULT;
		CheckFeatureSupport : #convention(win64) (
			this: ^ID3D11Device,
			Feature: D3D11_FEATURE,
			pFeatureSupportData: ^void,
			FeatureSupportDataSize: UINT = 0
		) -> HRESULT;
		GetPrivateData : #convention(win64) (
			this: ^ID3D11Device,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void = 0
		) -> HRESULT;
		SetPrivateData : #convention(win64) (
			this: ^ID3D11Device,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void = 0
		) -> HRESULT;
		SetPrivateDataInterface : #convention(win64) (
			this: ^ID3D11Device,
			guid: REFGUID,
			pData: ^IUnknown = 0
		) -> HRESULT;
		GetFeatureLevel : #convention(win64) (
			this: ^ID3D11Device
		) -> D3D_FEATURE_LEVEL;
		GetCreationFlags : #convention(win64) (
			this: ^ID3D11Device
		) -> UINT;
		GetDeviceRemovedReason : #convention(win64) (
			this: ^ID3D11Device
		) -> HRESULT;
		GetImmediateContext : #convention(win64) (
			this: ^ID3D11Device,
			ppImmediateContext: ^^ID3D11DeviceContext = 0
		);
		SetExceptionMode : #convention(win64) (
			this: ^ID3D11Device,
			RaiseFlags: UINT = 0
		) -> HRESULT;
		GetExceptionMode : #convention(win64) (
			this: ^ID3D11Device
		) -> UINT;
	};
}

ID3D11DeviceContext :: struct
{
	vtbl : ^struct {
		QueryInterface : #convention(win64) (
			this: ^ID3D11DeviceContext,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef : #convention(win64) (
			this: ^ID3D11DeviceContext
		) -> ULONG;
		Release : #convention(win64) (
			this: ^ID3D11DeviceContext
		) -> ULONG;
		GetDevice : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData : #convention(win64) (
			this: ^ID3D11DeviceContext,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData : #convention(win64) (
			this: ^ID3D11DeviceContext,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface : #convention(win64) (
			this: ^ID3D11DeviceContext,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		VSSetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		PSSetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		PSSetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pPixelShader: ^ID3D11PixelShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			NumClassInstances: UINT
		);
		PSSetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		VSSetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pVertexShader: ^ID3D11VertexShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			NumClassInstances: UINT
		);
		DrawIndexed : #convention(win64) (
			this: ^ID3D11DeviceContext,
			IndexCount: UINT,
			StartIndexLocation: UINT,
			BaseVertexLocation: INT
		);
		Draw : #convention(win64) (
			this: ^ID3D11DeviceContext,
			VertexCount: UINT,
			StartVertexLocation: UINT
		);
		Map : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pResource: ^ID3D11Resource,
			Subresource: UINT,
			MapType: D3D11_MAP,
			MapFlags: UINT,
			pMappedResource: ^D3D11_MAPPED_SUBRESOURCE
		) -> HRESULT;
		Unmap : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pResource: ^ID3D11Resource,
			Subresource: UINT
		);
		PSSetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		IASetInputLayout : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pInputLayout: ^ID3D11InputLayout
		);
		IASetVertexBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppVertexBuffers: ^^ID3D11Buffer,
			pStrides: ^UINT,
			pOffsets: ^UINT
		);
		IASetIndexBuffer : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pIndexBuffer: ^ID3D11Buffer,
			Format: DXGI_FORMAT,
			Offset: UINT
		);
		DrawIndexedInstanced : #convention(win64) (
			this: ^ID3D11DeviceContext,
			IndexCountPerInstance: UINT,
			InstanceCount: UINT,
			StartIndexLocation: UINT,
			BaseVertexLocation: INT,
			StartInstanceLocation: UINT
		);
		DrawInstanced : #convention(win64) (
			this: ^ID3D11DeviceContext,
			VertexCountPerInstance: UINT,
			InstanceCount: UINT,
			StartVertexLocation: UINT,
			StartInstanceLocation: UINT
		);
		GSSetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		GSSetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pShader: ^ID3D11GeometryShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			NumClassInstances: UINT
		);
		IASetPrimitiveTopology : #convention(win64) (
			this: ^ID3D11DeviceContext,
			Topology: D3D11_PRIMITIVE_TOPOLOGY
		);
		VSSetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		VSSetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		Begin : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pAsync: ^ID3D11Asynchronous
		);
		End : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pAsync: ^ID3D11Asynchronous
		);
		GetData : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pAsync: ^ID3D11Asynchronous,
			pData: ^void,
			DataSize: UINT,
			GetDataFlags: UINT
		) -> HRESULT;
		SetPredication : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pPredicate: ^ID3D11Predicate,
			PredicateValue: BOOL
		);
		GSSetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		GSSetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		OMSetRenderTargets : #convention(win64) (
			this: ^ID3D11DeviceContext,
			NumViews: UINT,
			ppRenderTargetViews: ^^ID3D11RenderTargetView,
			pDepthStencilView: ^ID3D11DepthStencilView
		);
		OMSetRenderTargetsAndUnorderedAccessViews : #convention(win64) (
			this: ^ID3D11DeviceContext,
			NumRTVs: UINT,
			ppRenderTargetViews: ^^ID3D11RenderTargetView,
			pDepthStencilView: ^ID3D11DepthStencilView,
			UAVStartSlot: UINT,
			NumUAVs: UINT,
			ppUnorderedAccessViews: ^^ID3D11UnorderedAccessView,
			pUAVInitialCounts: ^UINT
		);
		OMSetBlendState : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pBlendState: ^ID3D11BlendState,
			BlendFactor: [4] FLOAT,
			SampleMask: UINT
		);
		OMSetDepthStencilState : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pDepthStencilState: ^ID3D11DepthStencilState,
			StencilRef: UINT
		);
		SOSetTargets : #convention(win64) (
			this: ^ID3D11DeviceContext,
			NumBuffers: UINT,
			ppSOTargets: ^^ID3D11Buffer,
			pOffsets: ^UINT
		);
		DrawAuto : #convention(win64) (
			this: ^ID3D11DeviceContext
		);
		DrawIndexedInstancedIndirect : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pBufferForArgs: ^ID3D11Buffer,
			AlignedByteOffsetForArgs: UINT
		);
		DrawInstancedIndirect : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pBufferForArgs: ^ID3D11Buffer,
			AlignedByteOffsetForArgs: UINT
		);
		Dispatch : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ThreadGroupCountX: UINT,
			ThreadGroupCountY: UINT,
			ThreadGroupCountZ: UINT
		);
		DispatchIndirect : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pBufferForArgs: ^ID3D11Buffer,
			AlignedByteOffsetForArgs: UINT
		);
		RSSetState : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pRasterizerState: ^ID3D11RasterizerState
		);
		RSSetViewports : #convention(win64) (
			this: ^ID3D11DeviceContext,
			NumViewports: UINT,
			pViewports: ^D3D11_VIEWPORT
		);
		RSSetScissorRects : #convention(win64) (
			this: ^ID3D11DeviceContext,
			NumRects: UINT,
			pRects: ^D3D11_RECT
		);
		CopySubresourceRegion : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pDstResource: ^ID3D11Resource,
			DstSubresource: UINT,
			DstX: UINT,
			DstY: UINT,
			DstZ: UINT,
			pSrcResource: ^ID3D11Resource,
			SrcSubresource: UINT,
			pSrcBox: ^D3D11_BOX
		);
		CopyResource : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pDstResource: ^ID3D11Resource,
			pSrcResource: ^ID3D11Resource
		);
		UpdateSubresource : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pDstResource: ^ID3D11Resource,
			DstSubresource: UINT,
			pDstBox: ^D3D11_BOX,
			pSrcData: ^void,
			SrcRowPitch: UINT,
			SrcDepthPitch: UINT
		);
		CopyStructureCount : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pDstBuffer: ^ID3D11Buffer,
			DstAlignedByteOffset: UINT,
			pSrcView: ^ID3D11UnorderedAccessView
		);
		ClearRenderTargetView : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pRenderTargetView: ^ID3D11RenderTargetView,
			ColorRGBA: [4] FLOAT
		);
		ClearUnorderedAccessViewUint : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pUnorderedAccessView: ^ID3D11UnorderedAccessView,
			Values: [4] UINT
		);
		ClearUnorderedAccessViewFloat : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pUnorderedAccessView: ^ID3D11UnorderedAccessView,
			Values: [4] FLOAT
		);
		ClearDepthStencilView : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pDepthStencilView: ^ID3D11DepthStencilView,
			ClearFlags: D3D11_CLEAR_FLAG,
			Depth: FLOAT,
			Stencil: UINT8
		);
		GenerateMips : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pShaderResourceView: ^ID3D11ShaderResourceView
		);
		SetResourceMinLOD : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pResource: ^ID3D11Resource,
			MinLOD: FLOAT
		);
		GetResourceMinLOD : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pResource: ^ID3D11Resource
		) -> FLOAT;
		ResolveSubresource : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pDstResource: ^ID3D11Resource,
			DstSubresource: UINT,
			pSrcResource: ^ID3D11Resource,
			SrcSubresource: UINT,
			Format: DXGI_FORMAT
		);
		ExecuteCommandList : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pCommandList: ^ID3D11CommandList,
			RestoreContextState: BOOL
		);
		HSSetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		HSSetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pHullShader: ^ID3D11HullShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			NumClassInstances: UINT
		);
		HSSetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		HSSetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		DSSetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		DSSetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pDomainShader: ^ID3D11DomainShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			NumClassInstances: UINT
		);
		DSSetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		DSSetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		CSSetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		CSSetUnorderedAccessViews : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumUAVs: UINT,
			ppUnorderedAccessViews: ^^ID3D11UnorderedAccessView,
			pUAVInitialCounts: ^UINT
		);
		CSSetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pComputeShader: ^ID3D11ComputeShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			NumClassInstances: UINT
		);
		CSSetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		CSSetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		VSGetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		PSGetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		PSGetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppPixelShader: ^^ID3D11PixelShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			pNumClassInstances: ^UINT
		);
		PSGetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		VSGetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppVertexShader: ^^ID3D11VertexShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			pNumClassInstances: ^UINT
		);
		PSGetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		IAGetInputLayout : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppInputLayout: ^^ID3D11InputLayout
		);
		IAGetVertexBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppVertexBuffers: ^^ID3D11Buffer,
			pStrides: ^UINT,
			pOffsets: ^UINT
		);
		IAGetIndexBuffer : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pIndexBuffer: ^^ID3D11Buffer,
			Format: ^DXGI_FORMAT,
			Offset: ^UINT
		);
		GSGetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		GSGetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppGeometryShader: ^^ID3D11GeometryShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			pNumClassInstances: ^UINT
		);
		IAGetPrimitiveTopology : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pTopology: ^D3D11_PRIMITIVE_TOPOLOGY
		);
		VSGetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		VSGetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		GetPredication : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppPredicate: ^^ID3D11Predicate,
			pPredicateValue: ^BOOL
		);
		GSGetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		GSGetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		OMGetRenderTargets : #convention(win64) (
			this: ^ID3D11DeviceContext,
			NumViews: UINT,
			ppRenderTargetViews: ^^ID3D11RenderTargetView,
			ppDepthStencilView: ^^ID3D11DepthStencilView
		);
		OMGetRenderTargetsAndUnorderedAccessViews : #convention(win64) (
			this: ^ID3D11DeviceContext,
			NumRTVs: UINT,
			ppRenderTargetViews: ^^ID3D11RenderTargetView,
			ppDepthStencilView: ^^ID3D11DepthStencilView,
			UAVStartSlot: UINT,
			NumUAVs: UINT,
			ppUnorderedAccessViews: ^^ID3D11UnorderedAccessView
		);
		OMGetBlendState : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppBlendState: ^^ID3D11BlendState,
			BlendFactor: [4] FLOAT,
			pSampleMask: ^UINT
		);
		OMGetDepthStencilState : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppDepthStencilState: ^^ID3D11DepthStencilState,
			pStencilRef: ^UINT
		);
		SOGetTargets : #convention(win64) (
			this: ^ID3D11DeviceContext,
			NumBuffers: UINT,
			ppSOTargets: ^^ID3D11Buffer
		);
		RSGetState : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppRasterizerState: ^^ID3D11RasterizerState
		);
		RSGetViewports : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pNumViewports: ^UINT,
			pViewports: ^D3D11_VIEWPORT
		);
		RSGetScissorRects : #convention(win64) (
			this: ^ID3D11DeviceContext,
			pNumRects: ^UINT,
			pRects: ^D3D11_RECT
		);
		HSGetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		HSGetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppHullShader: ^^ID3D11HullShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			pNumClassInstances: ^UINT
		);
		HSGetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		HSGetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		DSGetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		DSGetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppDomainShader: ^^ID3D11DomainShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			pNumClassInstances: ^UINT
		);
		DSGetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		DSGetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		CSGetShaderResources : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumViews: UINT,
			ppShaderResourceViews: ^^ID3D11ShaderResourceView
		);
		CSGetUnorderedAccessViews : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumUAVs: UINT,
			ppUnorderedAccessViews: ^^ID3D11UnorderedAccessView
		);
		CSGetShader : #convention(win64) (
			this: ^ID3D11DeviceContext,
			ppComputeShader: ^^ID3D11ComputeShader,
			ppClassInstances: ^^ID3D11ClassInstance,
			pNumClassInstances: ^UINT
		);
		CSGetSamplers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumSamplers: UINT,
			ppSamplers: ^^ID3D11SamplerState
		);
		CSGetConstantBuffers : #convention(win64) (
			this: ^ID3D11DeviceContext,
			StartSlot: UINT,
			NumBuffers: UINT,
			ppConstantBuffers: ^^ID3D11Buffer
		);
		ClearState : #convention(win64) (
			this: ^ID3D11DeviceContext
		);
		Flush : #convention(win64) (
			this: ^ID3D11DeviceContext
		);
		GetType : #convention(win64) (
			this: ^ID3D11DeviceContext
		) -> D3D11_DEVICE_CONTEXT_TYPE;
		GetContextFlags : #convention(win64) (
			this: ^ID3D11DeviceContext
		) -> UINT;
		FinishCommandList : #convention(win64) (
			this: ^ID3D11DeviceContext,
			RestoreDeferredContextState: BOOL,
			ppCommandList: ^^ID3D11CommandList
		) -> HRESULT;
	};
}

ID3D11VertexShader :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11VertexShader,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11VertexShader
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11VertexShader
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11VertexShader,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11VertexShader,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11VertexShader,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11VertexShader,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
	};
}

ID3D11PixelShader :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11PixelShader,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11PixelShader
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11PixelShader
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11PixelShader,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11PixelShader,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11PixelShader,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11PixelShader,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
	};
}

ID3D11GeometryShader :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11GeometryShader,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11GeometryShader
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11GeometryShader
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11GeometryShader,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11GeometryShader,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11GeometryShader,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11GeometryShader,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
	};
}

ID3D11DomainShader :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11DomainShader,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11DomainShader
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11DomainShader
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11DomainShader,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11DomainShader,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11DomainShader,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11DomainShader,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
	};
}

ID3D11ComputeShader :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11ComputeShader,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11ComputeShader
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11ComputeShader
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11ComputeShader,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11ComputeShader,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11ComputeShader,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11ComputeShader,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
	};
}

ID3D11InputLayout :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11InputLayout,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11InputLayout
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11InputLayout
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11InputLayout,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11InputLayout,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11InputLayout,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11InputLayout,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
	};
}

ID3D11ClassInstance :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11ClassInstance,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11ClassInstance
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11ClassInstance
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11ClassInstance,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11ClassInstance,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11ClassInstance,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11ClassInstance,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetClassLinkage: #convention(win64) (
			this: ^ID3D11ClassInstance,
			ppLinkage: ^^ID3D11ClassLinkage
		);
		GetDesc: #convention(win64) (
			this: ^ID3D11ClassInstance,
			pDesc: ^D3D11_CLASS_INSTANCE_DESC
		);
		GetInstanceName: #convention(win64) (
			this: ^ID3D11ClassInstance,
			pInstanceName: ^CHAR,
			pBufferLength: ^SIZE_T
		);
		GetTypeName: #convention(win64) (
			this: ^ID3D11ClassInstance,
			pTypeName: ^CHAR,
			pBufferLength: ^SIZE_T
		);
	};
}

ID3D11ClassLinkage :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11ClassLinkage,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11ClassLinkage
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11ClassLinkage
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11ClassLinkage,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11ClassLinkage,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11ClassLinkage,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11ClassLinkage,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetClassInstance: #convention(win64) (
			this: ^ID3D11ClassLinkage,
			pClassInstanceName: ^CHAR,
			InstanceIndex: UINT,
			ppInstance: ^^ID3D11ClassInstance
		) -> HRESULT;
		CreateClassInstance: #convention(win64) (
			this: ^ID3D11ClassLinkage,
			pClassTypeName: ^CHAR,
			ConstantBufferOffset: UINT,
			ConstantVectorOffset: UINT,
			TextureOffset: UINT,
			SamplerOffset: UINT,
			ppInstance: ^^ID3D11ClassInstance
		) -> HRESULT;
	};
}

IDXGISwapChain :: struct
{
	vtbl : ^struct {
		QueryInterface : #convention(win64) (
			this: ^IDXGISwapChain,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef : #convention(win64) (
			this: ^IDXGISwapChain
		) -> ULONG;
		Release : #convention(win64) (
			this: ^IDXGISwapChain
		) -> ULONG;
		SetPrivateData : #convention(win64) (
			this: ^IDXGISwapChain,
			Name: REFGUID,
			DataSize: UINT,
			pData: ^void,
		) -> HRESULT;
		SetPrivateDataInterface : #convention(win64) (
			this: ^IDXGISwapChain,
			Name: REFGUID,
			pUnknown: ^IUnknown
		) -> HRESULT;
		GetPrivateData : #convention(win64) (
			this: ^IDXGISwapChain,
			Name: REFGUID,
			pDataSize: ^UINT,
			pData: ^void,
		) -> HRESULT;
		GetParent : #convention(win64) (
			this: ^IDXGISwapChain,
			riid: REFIID,
			ppParent: ^^void
		) -> HRESULT;
		GetDevice : #convention(win64) (
			this: ^IDXGISwapChain,
			riid: REFIID,
			ppDevice: ^^void
		) -> HRESULT;
		Present : #convention(win64) (
			this: ^IDXGISwapChain,
			SyncInterval: UINT,
			Flags: UINT
		) -> HRESULT;
		GetBuffer : #convention(win64) (
			this: ^IDXGISwapChain,
			Buffer: UINT,
			riid: REFIID,
			ppSurface: ^^void
		) -> HRESULT;
		SetFullscreenState : #convention(win64) (
			this: ^IDXGISwapChain,
			Fullscreen: BOOL,
			pTarget: ^IDXGIOutput
		) -> HRESULT;
		GetFullscreenState : #convention(win64) (
			this: ^IDXGISwapChain,
			pFullscreen: ^BOOL,
			ppTarget: ^^IDXGIOutput
		) -> HRESULT;
		GetDesc : #convention(win64) (
			this: ^IDXGISwapChain,
			pDesc: ^DXGI_SWAP_CHAIN_DESC
		) -> HRESULT;
		ResizeBuffers : #convention(win64) (
			this: ^IDXGISwapChain,
			BufferCount: UINT,
			Width: UINT,
			Height: UINT,
			NewFormat: DXGI_FORMAT,
			SwapChainFlags: UINT
		) -> HRESULT;
		ResizeTarget : #convention(win64) (
			this: ^IDXGISwapChain,
			pNewTargetParameters: ^DXGI_MODE_DESC
		) -> HRESULT;
		GetContainingOutput : #convention(win64) (
			this: ^IDXGISwapChain,
			ppOutput: ^^IDXGIOutput
		) -> HRESULT;
		GetFrameStatistics : #convention(win64) (
			this: ^IDXGISwapChain,
			pStats: ^DXGI_FRAME_STATISTICS
		) -> HRESULT;
		GetLastPresentCount : #convention(win64) (
			this: ^IDXGISwapChain,
			pLastPresentCount: ^UINT
		) -> HRESULT;
	};
}

IDXGIAdapter :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^IDXGIAdapter,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^IDXGIAdapter
		) -> ULONG;
		Release: #convention(win64) (
			this: ^IDXGIAdapter
		) -> ULONG;
		SetPrivateData: #convention(win64) (
			this: ^IDXGIAdapter,
			Name: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^IDXGIAdapter,
			Name: REFGUID,
			pUnknown: ^IUnknown
		) -> HRESULT;
		GetPrivateData: #convention(win64) (
			this: ^IDXGIAdapter,
			Name: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		GetParent: #convention(win64) (
			this: ^IDXGIAdapter,
			riid: REFIID,
			ppParent: ^^void
		) -> HRESULT;
		EnumOutputs: #convention(win64) (
			this: ^IDXGIAdapter,
			Output: UINT,
			ppOutput: ^^IDXGIOutput
		) -> HRESULT;
		GetDesc: #convention(win64) (
			this: ^IDXGIAdapter,
			pDesc: ^DXGI_ADAPTER_DESC
		) -> HRESULT;
		CheckInterfaceSupport: #convention(win64) (
			this: ^IDXGIAdapter,
			InterfaceName: REFGUID,
			pUMDVersion: ^LARGE_INTEGER
		) -> HRESULT;
	};
}

IDXGIOutput :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^IDXGIOutput,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^IDXGIOutput
		) -> ULONG;
		Release: #convention(win64) (
			this: ^IDXGIOutput
		) -> ULONG;
		SetPrivateData: #convention(win64) (
			this: ^IDXGIOutput,
			Name: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^IDXGIOutput,
			Name: REFGUID,
			pUnknown: ^IUnknown
		) -> HRESULT;
		GetPrivateData: #convention(win64) (
			this: ^IDXGIOutput,
			Name: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		GetParent: #convention(win64) (
			this: ^IDXGIOutput,
			riid: REFIID,
			ppParent: ^^void
		) -> HRESULT;
		GetDesc: #convention(win64) (
			this: ^IDXGIOutput,
			pDesc: ^DXGI_OUTPUT_DESC
		) -> HRESULT;
		GetDisplayModeList: #convention(win64) (
			this: ^IDXGIOutput,
			EnumFormat: DXGI_FORMAT,
			Flags: UINT,
			pNumModes: ^UINT,
			pDesc: ^DXGI_MODE_DESC
		) -> HRESULT;
		FindClosestMatchingMode: #convention(win64) (
			this: ^IDXGIOutput,
			pModeToMatch: ^DXGI_MODE_DESC,
			pClosestMatch: ^DXGI_MODE_DESC,
			pConcernedDevice: ^IUnknown
		) -> HRESULT;
		WaitForVBlank: #convention(win64) (
			this: ^IDXGIOutput
		) -> HRESULT;
		TakeOwnership: #convention(win64) (
			this: ^IDXGIOutput,
			pDevice: ^IUnknown,
			Exclusive: BOOL
		) -> HRESULT;
		ReleaseOwnership: #convention(win64) (
			this: ^IDXGIOutput
		);
		GetGammaControlCapabilities: #convention(win64) (
			this: ^IDXGIOutput,
			pGammaCaps: ^DXGI_GAMMA_CONTROL_CAPABILITIES
		) -> HRESULT;
		SetGammaControl: #convention(win64) (
			this: ^IDXGIOutput,
			pArray: ^DXGI_GAMMA_CONTROL
		) -> HRESULT;
		GetGammaControl: #convention(win64) (
			this: ^IDXGIOutput,
			pArray: ^DXGI_GAMMA_CONTROL
		) -> HRESULT;
		SetDisplaySurface: #convention(win64) (
			this: ^IDXGIOutput,
			pScanoutSurface: ^IDXGISurface
		) -> HRESULT;
		GetDisplaySurfaceData: #convention(win64) (
			this: ^IDXGIOutput,
			pDestination: ^IDXGISurface
		) -> HRESULT;
		GetFrameStatistics: #convention(win64) (
			this: ^IDXGIOutput,
			pStats: ^DXGI_FRAME_STATISTICS
		) -> HRESULT;
	};
}

ID3D11Resource :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Resource,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Resource
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Resource
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Resource,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Resource,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Resource,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Resource,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetType: #convention(win64) (
			this: ^ID3D11Resource,
			pResourceDimension: ^D3D11_RESOURCE_DIMENSION
		);
		SetEvictionPriority: #convention(win64) (
			this: ^ID3D11Resource,
			EvictionPriority: UINT
		);
		GetEvictionPriority: #convention(win64) (
			this: ^ID3D11Resource
		) -> UINT;
	};
}

ID3D11Buffer :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Buffer,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Buffer
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Buffer
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Buffer,
			//ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Buffer,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Buffer,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Buffer,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetType: #convention(win64) (
			this: ^ID3D11Buffer,
			pResourceDimension: ^D3D11_RESOURCE_DIMENSION
		);
		SetEvictionPriority: #convention(win64) (
			this: ^ID3D11Buffer,
			EvictionPriority: UINT
		);
		GetEvictionPriority: #convention(win64) (
			this: ^ID3D11Buffer
		) -> UINT;
		GetDesc: #convention(win64) (
			this: ^ID3D11Buffer,
			pDesc: ^D3D11_BUFFER_DESC
		);
	};
}

IDXGISurface :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			This: ^IDXGISurface,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			This: ^IDXGISurface
		) -> ULONG;
		Release: #convention(win64) (
			This: ^IDXGISurface
		) -> ULONG;
		SetPrivateData: #convention(win64) (
			This: ^IDXGISurface,
			Name: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			This: ^IDXGISurface,
			Name: REFGUID,
			pUnknown: ^IUnknown
		) -> HRESULT;
		GetPrivateData: #convention(win64) (
			This: ^IDXGISurface,
			Name: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		GetParent: #convention(win64) (
			This: ^IDXGISurface,
			riid: REFIID,
			ppParent: ^^void
		) -> HRESULT;
		GetDevice: #convention(win64) (
			This: ^IDXGISurface,
			riid: REFIID,
			ppDevice: ^^void
		) -> HRESULT;
		GetDesc: #convention(win64) (
			This: ^IDXGISurface,
			pDesc: ^DXGI_SURFACE_DESC
		) -> HRESULT;
		Map: #convention(win64) (
			This: ^IDXGISurface,
			pLockedRect: ^DXGI_MAPPED_RECT,
			MapFlags: UINT
		) -> HRESULT;
		Unmap: #convention(win64) (
			This: ^IDXGISurface
		) -> HRESULT;
	};
}

ID3D11ShaderResourceView :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11ShaderResourceView,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11ShaderResourceView
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11ShaderResourceView
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11ShaderResourceView,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11ShaderResourceView,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11ShaderResourceView,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11ShaderResourceView,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetResource: #convention(win64) (
			this: ^ID3D11ShaderResourceView,
			ppResource: ^^ID3D11Resource
		);
		GetDesc: #convention(win64) (
			this: ^ID3D11ShaderResourceView,
			pDesc: ^D3D11_SHADER_RESOURCE_VIEW_DESC
		);
	};
}

ID3D11UnorderedAccessView :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11UnorderedAccessView,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11UnorderedAccessView
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11UnorderedAccessView
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11UnorderedAccessView,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11UnorderedAccessView,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11UnorderedAccessView,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11UnorderedAccessView,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetResource: #convention(win64) (
			this: ^ID3D11UnorderedAccessView,
			ppResource: ^^ID3D11Resource
		);
		GetDesc: #convention(win64) (
			this: ^ID3D11UnorderedAccessView,
			pDesc: ^D3D11_UNORDERED_ACCESS_VIEW_DESC
		);
	};
}

ID3D11RenderTargetView :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11RenderTargetView,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11RenderTargetView
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11RenderTargetView
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11RenderTargetView,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11RenderTargetView,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11RenderTargetView,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11RenderTargetView,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetResource: #convention(win64) (
			this: ^ID3D11RenderTargetView,
			ppResource: ^^ID3D11Resource
		);
		GetDesc: #convention(win64) (
			this: ^ID3D11RenderTargetView,
			pDesc: ^D3D11_RENDER_TARGET_VIEW_DESC
		);
	};
}

ID3D11DepthStencilView :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11DepthStencilView,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11DepthStencilView
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11DepthStencilView
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11DepthStencilView,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11DepthStencilView,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11DepthStencilView,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11DepthStencilView,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetResource: #convention(win64) (
			this: ^ID3D11DepthStencilView,
			ppResource: ^^ID3D11Resource
		);
		GetDesc: #convention(win64) (
			this: ^ID3D11DepthStencilView,
			pDesc: ^D3D11_DEPTH_STENCIL_VIEW_DESC
		);
	};
}

ID3D11CommandList :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11CommandList,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11CommandList
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11CommandList
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11CommandList,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11CommandList,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11CommandList,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11CommandList,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetContextFlags: #convention(win64) (
			this: ^ID3D11CommandList
		) -> UINT;
	};
}

ID3D11HullShader :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11HullShader,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11HullShader
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11HullShader
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11HullShader,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11HullShader,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11HullShader,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11HullShader,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
	};
}

ID3D11SamplerState :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11SamplerState,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11SamplerState
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11SamplerState
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11SamplerState,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11SamplerState,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11SamplerState,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11SamplerState,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetDesc: #convention(win64) (
			this: ^ID3D11SamplerState,
			pDesc: ^D3D11_SAMPLER_DESC
		);
	};
}

ID3D11Texture1D :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Texture1D,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Texture1D
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Texture1D
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Texture1D,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Texture1D,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Texture1D,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Texture1D,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetType: #convention(win64) (
			this: ^ID3D11Texture1D,
			pResourceDimension: ^D3D11_RESOURCE_DIMENSION
		);
		SetEvictionPriority: #convention(win64) (
			this: ^ID3D11Texture1D,
			EvictionPriority: UINT
		);
		GetEvictionPriority: #convention(win64) (
			this: ^ID3D11Texture1D
		) -> UINT;
		GetDesc: #convention(win64) (
			this: ^ID3D11Texture1D,
			pDesc: ^D3D11_TEXTURE1D_DESC
		);
	};
}

ID3D11Texture2D :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Texture2D,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Texture2D
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Texture2D
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Texture2D,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Texture2D,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Texture2D,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Texture2D,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetType: #convention(win64) (
			this: ^ID3D11Texture2D,
			pResourceDimension: ^D3D11_RESOURCE_DIMENSION
		);
		SetEvictionPriority: #convention(win64) (
			this: ^ID3D11Texture2D,
			EvictionPriority: UINT
		);
		GetEvictionPriority: #convention(win64) (
			this: ^ID3D11Texture2D
		) -> UINT;
		GetDesc: #convention(win64) (
			this: ^ID3D11Texture2D,
			pDesc: ^D3D11_TEXTURE2D_DESC
		);
	};
}

ID3D11Texture3D :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Texture3D,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Texture3D
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Texture3D
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Texture3D,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Texture3D,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Texture3D,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Texture3D,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetType: #convention(win64) (
			this: ^ID3D11Texture3D,
			pResourceDimension: ^D3D11_RESOURCE_DIMENSION
		);
		SetEvictionPriority: #convention(win64) (
			this: ^ID3D11Texture3D,
			EvictionPriority: UINT
		);
		GetEvictionPriority: #convention(win64) (
			this: ^ID3D11Texture3D
		) -> UINT;
		GetDesc: #convention(win64) (
			this: ^ID3D11Texture3D,
			pDesc: ^D3D11_TEXTURE3D_DESC
		);
	};
}

ID3D11BlendState :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11BlendState,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11BlendState
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11BlendState
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11BlendState,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11BlendState,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11BlendState,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11BlendState,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetDesc: #convention(win64) (
			this: ^ID3D11BlendState,
			pDesc: ^D3D11_BLEND_DESC
		);
	};
}

ID3D11DepthStencilState :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11DepthStencilState,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11DepthStencilState
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11DepthStencilState
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11DepthStencilState,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11DepthStencilState,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11DepthStencilState,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11DepthStencilState,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetDesc: #convention(win64) (
			this: ^ID3D11DepthStencilState,
			pDesc: ^D3D11_DEPTH_STENCIL_DESC
		);
	};
}

ID3D11Asynchronous :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Asynchronous,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Asynchronous
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Asynchronous
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Asynchronous,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Asynchronous,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Asynchronous,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Asynchronous,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetDataSize: #convention(win64) (
			this: ^ID3D11Asynchronous
		) -> UINT;
	};
}

ID3D11RasterizerState :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11RasterizerState,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11RasterizerState
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11RasterizerState
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11RasterizerState,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11RasterizerState,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11RasterizerState,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11RasterizerState,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetDesc: #convention(win64) (
			this: ^ID3D11RasterizerState,
			pDesc: ^D3D11_RASTERIZER_DESC
		);
	};
}

ID3D11Query :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Query,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Query
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Query
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Query,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Query,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Query,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Query,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetDataSize: #convention(win64) (
			this: ^ID3D11Query
		) -> UINT;
		GetDesc: #convention(win64) (
			this: ^ID3D11Query,
			pDesc: ^D3D11_QUERY_DESC
		);
	};
}

ID3D11Predicate :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Predicate,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Predicate
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Predicate
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Predicate,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Predicate,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Predicate,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Predicate,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetDataSize: #convention(win64) (
			this: ^ID3D11Predicate
		) -> UINT;
		GetDesc: #convention(win64) (
			this: ^ID3D11Predicate,
			pDesc: ^D3D11_QUERY_DESC
		);
	};
}

ID3D11Counter :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D11Counter,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D11Counter
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D11Counter
		) -> ULONG;
		GetDevice: #convention(win64) (
			this: ^ID3D11Counter,
			ppDevice: ^^ID3D11Device
		);
		GetPrivateData: #convention(win64) (
			this: ^ID3D11Counter,
			guid: REFGUID,
			pDataSize: ^UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateData: #convention(win64) (
			this: ^ID3D11Counter,
			guid: REFGUID,
			DataSize: UINT,
			pData: ^void
		) -> HRESULT;
		SetPrivateDataInterface: #convention(win64) (
			this: ^ID3D11Counter,
			guid: REFGUID,
			pData: ^IUnknown
		) -> HRESULT;
		GetDataSize: #convention(win64) (
			this: ^ID3D11Counter
		) -> UINT;
		GetDesc: #convention(win64) (
			this: ^ID3D11Counter,
			pDesc: ^D3D11_COUNTER_DESC
		);
	};
}

ID3D10Blob :: struct
{
	vtbl : ^struct {
		QueryInterface: #convention(win64) (
			this: ^ID3D10Blob,
			riid: REFIID,
			ppvObject: ^^void
		) -> HRESULT;
		AddRef: #convention(win64) (
			this: ^ID3D10Blob
		) -> ULONG;
		Release: #convention(win64) (
			this: ^ID3D10Blob
		) -> ULONG;
		GetBufferPointer: #convention(win64) (
			this: ^ID3D10Blob
		) -> ^void;
		GetBufferSize: #convention(win64) (
			this: ^ID3D10Blob
		) -> SIZE_T;
	};
}
ID3DBlob :: #alias ID3D10Blob;

ID3DInclude :: struct
{
	vtbl : ^struct {
		Open: #convention(win64) (
			this: ^ID3DInclude,
			IncludeType: D3D_INCLUDE_TYPE,
			pFileName: ^CHAR,
			pParentData: ^void,
			ppData: ^^void,
			pBytes: ^UINT
		);
		Close: #convention(win64) (
			this: ^ID3DInclude,
			pData: ^void
		);
	};
}
ID3D10Include :: #alias ID3DInclude;

// IIDs
IID_ID3D11Asynchronous :s GUID = { 0x4b35d0cd, 0x1e15, 0x4258, { 0x9c,0x98,0x1b,0x13,0x33,0xf6,0xdd,0x3b } };
IID_ID3D11AuthenticatedChannel :s GUID = { 0x3015A308, 0xDCBD, 0x47aa, { 0xA7,0x47,0x19,0x24,0x86,0xD1,0x4D,0x4A } };
IID_ID3D11BlendState :s GUID = { 0x75b68faa, 0x347d, 0x4159, { 0x8f,0x45,0xa0,0x64,0x0f,0x01,0xcd,0x9a } };
IID_ID3D11Buffer :s GUID = { 0x48570b85, 0xd1ee, 0x4fcd, { 0xa2,0x50,0xeb,0x35,0x07,0x22,0xb0,0x37 } };
IID_ID3D11ClassInstance :s GUID = { 0xa6cd7faa, 0xb0b7, 0x4a2f, { 0x94,0x36,0x86,0x62,0xa6,0x57,0x97,0xcb } };
IID_ID3D11ClassLinkage :s GUID = { 0xddf57cba, 0x9543, 0x46e4, { 0xa1,0x2b,0xf2,0x07,0xa0,0xfe,0x7f,0xed } };
IID_ID3D11CommandList :s GUID = { 0xa24bc4d1, 0x769e, 0x43f7, { 0x80,0x13,0x98,0xff,0x56,0x6c,0x18,0xe2 } };
IID_ID3D11ComputeShader :s GUID = { 0x4f5b196e, 0xc2bd, 0x495e, { 0xbd,0x01,0x1f,0xde,0xd3,0x8e,0x49,0x69 } };
IID_ID3D11Counter :s GUID = { 0x6e8c49fb, 0xa371, 0x4770, { 0xb4,0x40,0x29,0x08,0x60,0x22,0xb7,0x41 } };
IID_ID3D11CryptoSession :s GUID = { 0x9B32F9AD, 0xBDCC, 0x40a6, { 0xA3,0x9D,0xD5,0xC8,0x65,0x84,0x57,0x20 } };
IID_ID3D11DepthStencilState :s GUID = { 0x03823efb, 0x8d8f, 0x4e1c, { 0x9a,0xa2,0xf6,0x4b,0xb2,0xcb,0xfd,0xf1 } };
IID_ID3D11DepthStencilView :s GUID = { 0x9fdac92a, 0x1876, 0x48c3, { 0xaf,0xad,0x25,0xb9,0x4f,0x84,0xa9,0xb6 } };
IID_ID3D11Device :s GUID = { 0xdb6f6ddb, 0xac77, 0x4e88, { 0x82,0x53,0x81,0x9d,0xf9,0xbb,0xf1,0x40 } };
IID_ID3D11DeviceChild :s GUID = { 0x1841e5c8, 0x16b0, 0x489b, { 0xbc,0xc8,0x44,0xcf,0xb0,0xd5,0xde,0xae } };
IID_ID3D11DeviceContext :s GUID = { 0xc0bfa96c, 0xe089, 0x44fb, { 0x8e,0xaf,0x26,0xf8,0x79,0x61,0x90,0xda } };
IID_ID3D11DomainShader :s GUID = { 0xf582c508, 0x0f36, 0x490c, { 0x99,0x77,0x31,0xee,0xce,0x26,0x8c,0xfa } };
IID_ID3D11GeometryShader :s GUID = { 0x38325b96, 0xeffb, 0x4022, { 0xba,0x02,0x2e,0x79,0x5b,0x70,0x27,0x5c } };
IID_ID3D11HullShader :s GUID = { 0x8e5c6061, 0x628a, 0x4c8e, { 0x82,0x64,0xbb,0xe4,0x5c,0xb3,0xd5,0xdd } };
IID_ID3D11InputLayout :s GUID = { 0xe4819ddc, 0x4cf0, 0x4025, { 0xbd,0x26,0x5d,0xe8,0x2a,0x3e,0x07,0xb7 } };
IID_ID3D11PixelShader :s GUID = { 0xea82e40d, 0x51dc, 0x4f33, { 0x93,0xd4,0xdb,0x7c,0x91,0x25,0xae,0x8c } };
IID_ID3D11Predicate :s GUID = { 0x9eb576dd, 0x9f77, 0x4d86, { 0x81,0xaa,0x8b,0xab,0x5f,0xe4,0x90,0xe2 } };
IID_ID3D11Query :s GUID = { 0xd6c00747, 0x87b7, 0x425e, { 0xb8,0x4d,0x44,0xd1,0x08,0x56,0x0a,0xfd } };
IID_ID3D11RasterizerState :s GUID = { 0x9bb4ab81, 0xab1a, 0x4d8f, { 0xb5,0x06,0xfc,0x04,0x20,0x0b,0x6e,0xe7 } };
IID_ID3D11RenderTargetView :s GUID = { 0xdfdba067, 0x0b8d, 0x4865, { 0x87,0x5b,0xd7,0xb4,0x51,0x6c,0xc1,0x64 } };
IID_ID3D11Resource :s GUID = { 0xdc8e63f3, 0xd12b, 0x4952, { 0xb4,0x7b,0x5e,0x45,0x02,0x6a,0x86,0x2d } };
IID_ID3D11SamplerState :s GUID = { 0xda6fea51, 0x564c, 0x4487, { 0x98,0x10,0xf0,0xd0,0xf9,0xb4,0xe3,0xa5 } };
IID_ID3D11ShaderResourceView :s GUID = { 0xb0e06fe0, 0x8192, 0x4e1a, { 0xb1,0xca,0x36,0xd7,0x41,0x47,0x10,0xb2 } };
IID_ID3D11Texture1D :s GUID = { 0xf8fb5c27, 0xc6b3, 0x4f75, { 0xa4,0xc8,0x43,0x9a,0xf2,0xef,0x56,0x4c } };
IID_ID3D11Texture2D :s GUID = { 0x6f15aaf2, 0xd208, 0x4e89, { 0x9a,0xb4,0x48,0x95,0x35,0xd3,0x4f,0x9c } };
IID_ID3D11Texture3D :s GUID = { 0x037e866e, 0xf56d, 0x4357, { 0xa8,0xaf,0x9d,0xab,0xbe,0x6e,0x25,0x0e } };
IID_ID3D11UnorderedAccessView :s GUID = { 0x28acf509, 0x7f5c, 0x48f6, { 0x86,0x11,0xf3,0x16,0x01,0x0a,0x63,0x80 } };
IID_ID3D11VertexShader :s GUID = { 0x3b301d64, 0xd678, 0x4289, { 0x88,0x97,0x22,0xf8,0x92,0x8b,0x72,0xf3 } };
IID_ID3D11VideoContext :s GUID = { 0x61F21C45, 0x3C0E, 0x4a74, { 0x9C,0xEA,0x67,0x10,0x0D,0x9A,0xD5,0xE4 } };
IID_ID3D11VideoDecoder :s GUID = { 0x3C9C5B51, 0x995D, 0x48d1, { 0x9B,0x8D,0xFA,0x5C,0xAE,0xDE,0xD6,0x5C } };
IID_ID3D11VideoDecoderOutputView :s GUID = { 0xC2931AEA, 0x2A85, 0x4f20, { 0x86,0x0F,0xFB,0xA1,0xFD,0x25,0x6E,0x18 } };
IID_ID3D11VideoDevice :s GUID = { 0x10EC4D5B, 0x975A, 0x4689, { 0xB9,0xE4,0xD0,0xAA,0xC3,0x0F,0xE3,0x33 } };
IID_ID3D11VideoProcessor :s GUID = { 0x1D7B0652, 0x185F, 0x41c6, { 0x85,0xCE,0x0C,0x5B,0xE3,0xD4,0xAE,0x6C } };
IID_ID3D11VideoProcessorEnumerator :s GUID = { 0x31627037, 0x53AB, 0x4200, { 0x90,0x61,0x05,0xFA,0xA9,0xAB,0x45,0xF9 } };
IID_ID3D11VideoProcessorInputView :s GUID = { 0x11EC5A5F, 0x51DC, 0x4945, { 0xAB,0x34,0x6E,0x8C,0x21,0x30,0x0E,0xA5 } };
IID_ID3D11VideoProcessorOutputView :s GUID = { 0xA048285E, 0x25A9, 0x4527, { 0xBD,0x93,0xD6,0x8B,0x68,0xC4,0x42,0x54 } };
IID_ID3D11View :s GUID = { 0x839d1216, 0xbb2e, 0x412b, { 0xb7,0xf4,0xa9,0xdb,0xeb,0xe0,0x8e,0xd1 } };
