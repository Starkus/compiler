String :: struct
{
	size : u64;
	data : ^u8;
};

Array :: struct
{
	size : u64;
	data : ^void;
};

TypeKind :: enum : u8
{
	TypeKind_Integer,
	TypeKind_Floating,
	TypeKind_Struct,
	TypeKind_Enum,
	TypeKind_Pointer,
	TypeKind_Array
};
TypeInfo :: struct
{
	typeKind : TypeKind;
};

TypeInfoInteger :: struct
{
	using _typeInfo : TypeInfo;
	size : s64;
	isSigned : s32;
};

TypeInfoFloating :: struct
{
	using _typeInfo : TypeInfo;
	size : s64;
};

TypeInfoStructMember :: struct
{
	name : String;
	typeInfo : ^TypeInfo;
	offset : u64;
};
TypeInfoStruct :: struct
{
	using _typeInfo : TypeInfo;
	name : String;
	isUnion : s32;
	members : [] TypeInfoStructMember;
	size : u64;
};

TypeInfoEnum :: struct
{
	using _typeInfo : TypeInfo;
	name : String;
	typeInfo : ^TypeInfo;
};

TypeInfoPointer :: struct
{
	using _typeInfo : TypeInfo;
	typeInfo : ^TypeInfo;
};

TypeInfoArray :: struct
{
	using _typeInfo : TypeInfo;
	count : u64;
	elementTypeInfo : ^TypeInfo;
};

printf :: external (format : ^u8, ...);
Print :: (string : String)
{
	printf(string.data);
}
