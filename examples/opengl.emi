#include "core/windows.emi"
#include "core/opengl.emi"
#linklib "opengl32.lib"

//compiler_subsystem :: COMPILER_SUBSYSTEM_WINDOWS;

windowHandle :s ^void;
running :s bool = true;

Win32WindowCallback :: (hWnd : ^void, uMsg : u32, wParam : u64, lParam : u64) -> u64
{
	if (uMsg == WM_DESTROY || uMsg == WM_CLOSE)
	{
		running = false;
		PostQuitMessage(0);
	}
	else
		return DefWindowProcA(hWnd, uMsg, wParam, lParam);

	return 0;
}

Main :: () -> s64
{
	hInstance := ^__ImageBase;

	windowClassName := "window\0";
	windowTitle := "Hello OpenGL!\0";

	windowClass : WNDCLASSEXA;
	windowClass.cbSize = cast(u32)sizeof(windowClass);
	windowClass.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
	windowClass.lpfnWndProc = Win32WindowCallback;
	windowClass.hInstance = hInstance;
	windowClass.lpszClassName = windowClassName.data;

	success := RegisterClassExA(^windowClass);

	pfd : PIXELFORMATDESCRIPTOR;
	pfd.nSize = cast(u16) sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion = 1;
	pfd.dwFlags = PFD_DOUBLEBUFFER | PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.cColorBits = 32;
	pfd.cDepthBits = 32;

	windowHandle = CreateWindowExA(0, windowClassName.data, windowTitle.data, WS_OVERLAPPEDWINDOW | WS_VISIBLE,
					16, 16, 800, 600, 0, 0, hInstance, 0);

	deviceContext := GetDC(windowHandle);
	pixelFormatId := ChoosePixelFormat(deviceContext, ^pfd);
	SetPixelFormat(deviceContext, pixelFormatId, ^pfd);
	glContext := wglCreateContext(deviceContext);
	wglMakeCurrent(deviceContext, glContext);

	glViewport(0, 0, 800, 600);

	message : MSG = ?;
	while running
	{
		glClearColor(0.8, 0.6, 0.0, 0.0);
		glClear(GL_COLOR_BUFFER_BIT);
		SwapBuffers(deviceContext);

		while PeekMessageA(^message, 0, 0, 0, PM_REMOVE)
		{
			if message.message == WM_QUIT
			{
				running = 0;
			}
			else
			{
				TranslateMessage(^message);
				DispatchMessageA(^message);
			}
		}
	}

	wglDeleteContext(glContext);
	ReleaseDC(windowHandle, deviceContext);
	DestroyWindow(windowHandle);

	Print("Test ok\n");
	return 0;
}
