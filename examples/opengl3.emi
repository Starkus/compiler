#include "core/windows.emi"
#include "core/opengl.emi"
#linklib "opengl32.lib"

//compiler_subsystem :: COMPILER_SUBSYSTEM_WINDOWS;

running :s bool = true;
windowHandle :s ^void;
windowWidth :s s32 = 800;
windowHeight :s s32 = 600;
deviceContext :s ^void;
glContext :s ^void;

Win32WindowCallback :: (hWnd : ^void, message : u32, wParam : u64, lParam : u64) -> u64
{
	if message == WM_CLOSE
		PostQuitMessage(0);
	else if message == WM_SIZE
	{
		windowWidth = cast(s32)(lParam & 0xFFFF);
		windowHeight = cast(s32)((lParam >> 16) & 0xFFFF);
		glViewport(0, 0, windowWidth, windowHeight);
	}
	else
		return DefWindowProcA(hWnd, message, wParam, lParam);

	return 0;
}

LoadShader :: (filename : String, shaderType : GLenum) -> GLuint
{
	filenameCStr : [512] u8 = ?;
	for filename filenameCStr[i] = @it;
	filenameCStr[filename.size] = 0;
	fileHandle := CreateFileA(^filenameCStr, GENERIC_READ, FILE_SHARE_READ, null, OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL, null);
	defer CloseHandle(fileHandle);

	if fileHandle == INVALID_HANDLE_VALUE
	{
		PrintF("Shader file \"%\" not found!\n", filename);
		return 0;
	}

	fileSize := GetFileSize(fileHandle, null);
	fileBuffer := cast(^u8)VirtualAlloc(0, fileSize, MEM_COMMIT, PAGE_READWRITE);
	defer VirtualFree(fileBuffer, 0, MEM_RELEASE);
	bytesRead : u32 = ?;
	success := ReadFile(fileHandle, fileBuffer, fileSize, ^bytesRead, null);

	if !success
	{
		PrintF("Couldn't read shader file \"%\"!\n", filename);
		return 0;
	}

	fileStr : String;
	fileStr.size = fileSize;
	fileStr.data = fileBuffer;

	shaderId := glCreateShader(shaderType);
	glShaderSource(shaderId, 1, ^fileBuffer, null);
	glCompileShader(shaderId);

	logSize : s32;
	glGetShaderiv(shaderId, GL_INFO_LOG_LENGTH, ^logSize);
	if (logSize > 0)
	{
		shaderLog : String;
		shaderLog.size = cast(u64)logSize;
		shaderLog.data = cast(^u8)VirtualAlloc(0, shaderLog.size, MEM_COMMIT, PAGE_READWRITE);
		defer VirtualFree(shaderLog.data, 0, MEM_RELEASE);
		glGetShaderInfoLog(shaderId, logSize, null, shaderLog.data);
		PrintF("%\n", shaderLog);
	}

	return shaderId;
}

InitOpenGLContext :: ()
{
	windowClass : WNDCLASSEXA;
	hInstance := ^__ImageBase;
	windowClassName := "window\0";
	windowTitle := "Hello OpenGL 3.3!\0";

	windowClass.cbSize = cast(u32)sizeof(windowClass);
	windowClass.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
	windowClass.lpfnWndProc = Win32WindowCallback;
	windowClass.hInstance = hInstance;
	windowClass.lpszClassName = windowClassName.data;

	RegisterClassExA(^windowClass);

	// Fake window
	fakeWindow := CreateWindowExA(0, windowClassName.data, windowTitle.data, WS_CLIPSIBLINGS |
			WS_CLIPCHILDREN, 0, 0, 1, 1, null, null, hInstance, null);

	// Fake context
	fakeContext := GetDC(fakeWindow);

	pfd : PIXELFORMATDESCRIPTOR;
	pfd.nSize = cast(u16) sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion = 1;
	pfd.dwFlags = PFD_DOUBLEBUFFER | PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.cColorBits = 32;
	pfd.cDepthBits = 32;

	choose := ChoosePixelFormat(fakeContext, ^pfd);

	SetPixelFormat(fakeContext, choose, ^pfd);

	fakeGlContext := wglCreateContext(fakeContext);
	wglMakeCurrent(fakeContext, fakeGlContext);

	// Real context
	LoadWGLProcedures();

	windowHandle = CreateWindowExA(0, windowClassName.data, windowTitle.data,
			WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, windowWidth, windowHeight, 0, 0, hInstance, 0);

	deviceContext = GetDC(windowHandle);

	pixelAttribs : [23] u32 = {
		WGL_DRAW_TO_WINDOW_ARB, true,
		WGL_SUPPORT_OPENGL_ARB, true,
		WGL_DOUBLE_BUFFER_ARB, true,
		WGL_PIXEL_TYPE_ARB,
		WGL_TYPE_RGBA_ARB,
		WGL_ACCELERATION_ARB,
		WGL_FULL_ACCELERATION_ARB,
		WGL_COLOR_BITS_ARB, 32,
		WGL_ALPHA_BITS_ARB, 8,
		WGL_DEPTH_BITS_ARB, 24,
		WGL_STENCIL_BITS_ARB, 8,
		WGL_SAMPLE_BUFFERS_ARB, true,
		WGL_SAMPLES_ARB, 4,
		0
	};
	pixelFormatId : s32 = ?;
	numFormats: u32 = ?;
	wglChoosePixelFormatARB(deviceContext, ^pixelAttribs, null, 1,
			^pixelFormatId, ^numFormats);

	DescribePixelFormat(deviceContext, pixelFormatId, cast(u32)sizeof(pfd), ^pfd);
	SetPixelFormat(deviceContext, pixelFormatId, ^pfd);

	contextAttribs : [7] s32 =
	{
		WGL_CONTEXT_MAJOR_VERSION_ARB, 3,
		WGL_CONTEXT_MINOR_VERSION_ARB, 3,
		WGL_CONTEXT_PROFILE_MASK_ARB,
		WGL_CONTEXT_CORE_PROFILE_BIT_ARB,
		0
	};

	glContext = wglCreateContextAttribsARB(deviceContext, 0, ^contextAttribs);

	wglMakeCurrent(null, null);
	wglDeleteContext(fakeGlContext);
	ReleaseDC(fakeWindow, fakeContext);
	DestroyWindow(fakeWindow);

	wglMakeCurrent(deviceContext, glContext);
}

Main :: () -> s64
{
	InitOpenGLContext();

	vertexArrayId : GLuint = ?;
	glGenVertexArrays(1, ^vertexArrayId);
	glBindVertexArray(vertexArrayId);

	Vertex :: struct
	{
		x : GLfloat; y : GLfloat; z : GLfloat;
		r : GLfloat; g : GLfloat; b : GLfloat;
	};

	vertexBufferData : [9] Vertex = {
		{ -1.0, -1.0,  0.0,     0.0, 1.0, 1.0 },
		{  1.0, -1.0,  0.0,     1.0, 0.0, 1.0 },
		{  0.0,  1.0,  0.0,     1.0, 1.0, 0.0 }
	};

	// Projection matrix
	projectionMatrix : mat4 = &gameState->projMatrix;
	{
		const f32 fov = HALFPI;
		const f32 near = 0.01f;
		const f32 far = 2000.0f;
		const f32 aspectRatio = (16.0f / 9.0f);

		const f32 top = Tan(HALFPI - fov / 2.0f);
		const f32 right = top / aspectRatio;

		*proj =
		{
			right, 0.0f, 0.0f, 0.0f,
			0.0f, top, 0.0f, 0.0f,
			0.0f, 0.0f, -(far + near) / (far - near), -1.0f,
			0.0f, 0.0f, -(2.0f * far * near) / (far - near), 0.0f
		};
	}

	vertexBuffer : GLuint = ?;
	glGenBuffers(1, ^vertexBuffer);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexBufferData), ^vertexBufferData, GL_STATIC_DRAW);

	vertexShaderId   := LoadShader("tests/opengl3example_vertexshader.glsl",   GL_VERTEX_SHADER);
	fragmentShaderId := LoadShader("tests/opengl3example_fragmentshader.glsl", GL_FRAGMENT_SHADER);
	programId := glCreateProgram();
	glAttachShader(programId, vertexShaderId);
	glAttachShader(programId, fragmentShaderId);
	glLinkProgram(programId);

	logSize : s32 = ?;
	glGetProgramiv(programId, GL_INFO_LOG_LENGTH, ^logSize);
	if logSize > 0
	{
		programLog : String;
		programLog.size = cast(u64)logSize;
		programLog.data = cast(^u8)VirtualAlloc(0, programLog.size, MEM_COMMIT, PAGE_READWRITE);
		defer VirtualFree(programLog.data, 0, MEM_RELEASE);
		glGetProgramInfoLog(programId, logSize, null, programLog.data);
		PrintF("%\n", programLog);
	}

	glUseProgram(programId);

	message : MSG = ?;
	while running
	{
		glClearColor(0.8, 0.6, 0.0, 0.0);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glEnableVertexAttribArray(0);
		glEnableVertexAttribArray(1);
		glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
		stride := cast(s32) sizeof(Vertex);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, stride, null);
		glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, stride, 12);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		glDisableVertexAttribArray(0);
		glDisableVertexAttribArray(1);

		SwapBuffers(deviceContext);

		while PeekMessageA(^message, 0, 0, 0, PM_REMOVE)
		{
			if message.message == WM_QUIT
			{
				running = 0;
			}
			else
			{
				TranslateMessage(^message);
				DispatchMessageA(^message);
			}
		}
	}

	ExitProcess(0);
	return 0;
}
