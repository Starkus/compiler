foo :s u64;

operatorPrecedence :: (arg1 : u32, arg2 : u64 = 4) -> s32
{
	bar : u64 = arg2;
	baz : u32 = arg1;
	emi : u32 = 7;
	foo = 2 + 4 * 5;
	bar = 2 * 4 + 5;
	baz = 2 * (4 + 5); // Parenthesis
	baz = (2 * 4) + 5; // Parenthesis
	emi = baz;

	// Same precedence
	emi = 2 + 4 - 5;
	emi = 2 - 4 + 5;

	// Unary
	bar = !foo;
	bar = !foo + 5;

	// Boolean
	flag : bool = bar == foo;
	flag = !foo;
	//notAFlag : f32 = bar == foo;

	baz = 1 + 1;
	baz = 1 - 1;
	baz = 1 * 1;
	baz = 1 / 1;
	baz = 1 % 1;
	baz = 1 && 1;
	baz = 1 || 1;
	baz = 1 & 1;
	baz = 1 | 1;
	baz = 1 ^ 1;
	baz = -1;
	baz = ~1;

	baz += 16;
	baz -= 16;
	baz *= 16;
	baz /= 16;
	baz %= 16;
	baz <<= 1;
	baz >>= 1;
	baz ||= 0;
	baz &&= 1;
	baz |= 0;
	baz &= 1;
	baz ^= 1;

	asd := 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1;

	lop : u64 = 512;

	return 0;
}

Main :: () -> s64
{
	var : u32 = 7;
	operatorPrecedence(var, 5);

	// Default argument
	//operatorPrecedence(var);

	Print("Test ok\n");
	return 0;
}
