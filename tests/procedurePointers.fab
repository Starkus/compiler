#include "core/basic.fab";
#include "core/print.fab";

Proce :: ()
{
	Print("Procedure called through pointer!\n");
}

ReturnNumber :: () -> s32
{
	return 42;
}

ReturnNumberDifferentCC :: #convention(win64) () -> s32
{
	return 43;
}

Params :: (one : s32, two : s32, three : s32)
{
	PrintF("Params: %, %, %\n", one, two, three);
}

Varargs :: (format : String, ..args)
{
	PrintF(format, args);
}

ProcWrapper :: struct
{
	proc : ();
}

Main :: (args : [] String) -> s64
{
	pointerToProce : () = Proce;
	pointerToProce();

	pointerToReturnNumber : () -> s32 = ReturnNumber;
	//pointerToReturnNumber = ReturnNumberDifferentCC; // Calling convention mismatch, should give an error!
	number : s32 = pointerToReturnNumber();
	PrintF("Received number % through procedure pointer call\n", number);

	pointerToParams : (s32, s32, s32) = Params;
	pointerToParams(1, 2, 3);

	pointerToVarargs : (String, ..) = Varargs;
	pointerToVarargs("Print things: % % %\n", 1, 2.4, true);

	using procWrapper : ProcWrapper;
	procWrapper.proc = Proce;
	proc();

	return 0;
}
