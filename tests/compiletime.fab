#include "core/basic.fab";
#include "core/print.fab";

#linklib "tests/testdll/testdll";

CONSTANT :: #run RunThisOnCompileTime(10);

g_aGlobal :s s32 = 5;

TwoNumbers :: struct
{
	a: s32;
	b: s32;
}

#if compiler_platform == COMPILER_PLATFORM_WINDOWS
	TestProc :: #external #convention(win64) (a: s64, b: s64, c: s64, d: s64, e: s64, f: s64, g: s64, h: s64);
else
	TestProc :: #external #convention(linux64) (a: s64, b: s64, c: s64, d: s64, e: s64, f: s64, g: s64, h: s64);

TestProcWinCC   :: #external #convention(win64)   (a: s64, b: s64, c: s64, d: s64, e: s64, f: s64, g: s64, h: s64);
TestProcLinuxCC :: #external #convention(linux64) (a: s64, b: s64, c: s64, d: s64, e: s64, f: s64, g: s64, h: s64);

RunThisOnCompileTime :: (arg: s64) -> s64
{
	Print("Calling procedure from dll:\n");
	TestProc(1, 2, 3, 4, 5, 6, 7, 8);

	Print("Calling procedure with win64 calling convention from dll:\n");
	TestProcWinCC(2, 4, 6, 8, 10, 12, 14, 16);

	Print("Calling procedure with linux64 calling convention from dll:\n");
	TestProcLinuxCC(2, 4, 6, 8, 10, 12, 14, 16);

	foo := 6 + arg;

	// Pointers and dereferencing
	ptrToFoo := ^foo;
	@ptrToFoo += 5;

	// Structs
	bar : TwoNumbers = { 4, 5 };

	// Branches
	if foo > 6 bar.b += 1;
	if !foo return -1;

	// Arrays
	array : [8] s64;
	array[5] = 1000;
	foo *= array[5];

	result: s64 = foo * (bar.b + bar.a);

	g_aGlobal += 1;

	// Procedure calls
	Print("Compile time execution!\n");
	PrintF("Constant is %\n", result);
	PrintF("Global is %\n", g_aGlobal);

	return result;
}

Main :: (args: [] String) -> s64
{
	PrintF("Constant: %\n", CONSTANT);
	Print("Now running on runtime:\n");
	RunThisOnCompileTime(10);
	return 0;
}

#run {
	Print("Hello compile time\n");
}
