FloatArg :: (smol : f32, big : f64)
{
	PrintF("an f32 % and an f64 %\n", smol, big);
}

AnAwfulLotOfFloatArg :: (a : f32, b : f32, c : f32, d : f32, e : f32, f : f32, g : f32, h : f32)
{
	PrintF("args % % % % % % % %\n", a, b, c, d, e, f, g, h);
}

Main :: () -> s64
{
	FloatArg(2.5, 8.0);
	AnAwfulLotOfFloatArg(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8);

	someFloats : [13] f64 = {
		 5.00000000000000000000e-01,
		-1.66666666666666324348e-01,
		 8.33333333332248946124e-03,
		-1.98412698298579493134e-04,
		 2.75573137070700676789e-06,
		-2.50507602534068634195e-08,
		 1.58969099521155010221e-10,
		 4.16666666666666019037e-02,
		-1.38888888888741095749e-03,
		 2.48015872894767294178e-05,
		-2.75573143513906633035e-07,
		 2.08757232129817482790e-09,
		-1.13596475577881948265e-11
	};
	expectedHex : [13] u64 = {
		0x3FE0000000000000,
		0xBFC5555555555549,
		0x3F8111111110F8A6,
		0xBF2A01A019C161D5,
		0x3EC71DE357B1FE7D,
		0xBE5AE5E68A2B9CEB,
		0x3DE5D93A5ACFD57C,
		0x3FA555555555554C,
		0xBF56C16C16C15177,
		0x3EFA01A019CB1590,
		0xBE927E4F809C52AD,
		0x3E21EE9EBDB4B1C4,
		0xBDA8FAE9BE8838D4
	};
	floatStrings : [13] String = {
		" 5.00000000000000000000e-01",
		"-1.66666666666666324348e-01",
		" 8.33333333332248946124e-03",
		"-1.98412698298579493134e-04",
		" 2.75573137070700676789e-06",
		"-2.50507602534068634195e-08",
		" 1.58969099521155010221e-10",
		" 4.16666666666666019037e-02",
		"-1.38888888888741095749e-03",
		" 2.48015872894767294178e-05",
		"-2.75573143513906633035e-07",
		" 2.08757232129817482790e-09",
		"-1.13596475577881948265e-11"
	};
	for 0..13
	{
		union
		{
			asFloat : f64;
			asBytes : u64;
		};
		asFloat = someFloats[i];
		diff := cast(s64)(asBytes - expectedHex[i]);
		if (-4 > diff || diff > 4) // Give a little bit of slack
		{
			Print("!!!INCORRECT PARSING\n");
			return 1;
		}
		PrintF("Parsed number '%' is off by %\n", floatStrings[i], diff);
	}

	Print("Test ok\n");
	return 0;
}
