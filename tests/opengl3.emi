#include "core/windows.emi"
#include "core/opengl.emi"
#linklib "opengl32.lib"

//compiler_subsystem :: COMPILER_SUBSYSTEM_WINDOWS;

running :s bool = true;
windowHandle :s ^void;
windowWidth :s s32 = 800;
windowHeight :s s32 = 600;
deviceContext :s ^void;
glContext :s ^void;

Win32WindowCallback :: (hWnd : ^void, message : u32, wParam : u64, lParam : u64) -> u64
{
	if message == WM_CLOSE
		PostQuitMessage(0);
	else if message == WM_SIZE
	{
		windowWidth = cast(s32)(lParam & 0xFFFF);
		windowHeight = cast(s32)((lParam >> 16) & 0xFFFF);
		glViewport(0, 0, windowWidth, windowHeight);
	}
	else
		return DefWindowProcA(hWnd, message, wParam, lParam);

	return 0;
}

LoadShader :: (filename : String, shaderType : GLenum) -> GLuint
{
	filenameCStr : [512] u8;
	for filename filenameCStr[i] = @it;
	filenameCStr[filename.size] = 0;
	fileHandle := CreateFileA(^filenameCStr, GENERIC_READ, FILE_SHARE_READ, null, OPEN_EXISTING,
		FILE_ATTRIBUTE_NORMAL, null);
	defer CloseHandle(fileHandle);

	if fileHandle == INVALID_HANDLE_VALUE
	{
		PrintF("Shader file \"%\" not found!\n", filename);
		return 0;
	}

	fileSize := GetFileSize(fileHandle, null);
	fileBuffer := cast(^u8)VirtualAlloc(0, fileSize, MEM_COMMIT, PAGE_READWRITE);
	defer VirtualFree(fileBuffer, 0, MEM_RELEASE);
	bytesRead : u32;
	success := ReadFile(fileHandle, fileBuffer, fileSize, ^bytesRead, null);

	if !success
	{
		PrintF("Couldn't read shader file \"%\"!\n", filename);
		return 0;
	}

	fileStr : String;
	fileStr.size = fileSize;
	fileStr.data = fileBuffer;
	Print(fileStr);

	shaderId := glCreateShader(shaderType);
	glShaderSource(shaderId, 1, ^fileBuffer, null);
	glCompileShader(shaderId);

	logSize : s32;
	glGetShaderiv(shaderId, GL_INFO_LOG_LENGTH, ^logSize);
	if (logSize > 0)
	{
		shaderLog : String;
		shaderLog.size = cast(u64)logSize;
		shaderLog.data = cast(^u8)VirtualAlloc(0, shaderLog.size, MEM_COMMIT, PAGE_READWRITE);
		defer VirtualFree(shaderLog.data, 0, MEM_RELEASE);
		glGetShaderInfoLog(shaderId, logSize, null, shaderLog.data);
		PrintF("%\n", shaderLog);
	}

	return shaderId;
}

InitOpenGLContext :: ()
{
	windowClass : WNDCLASSEXA;
	hInstance := ^__ImageBase;
	windowClassName := "window\0";
	windowTitle := "Hello, Sailor!\0";

	windowClass.cbSize = cast(u32)sizeof(windowClass);
	windowClass.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
	windowClass.lpfnWndProc = Win32WindowCallback;
	windowClass.cbClsExtra = 0;
	windowClass.cbWndExtra = 0;
	windowClass.hInstance = hInstance;
	windowClass.hIcon = null;
	windowClass.hCursor = null;
	windowClass.hBrush = null;
	windowClass.lpszMenuName = null;
	windowClass.lpszClassName = windowClassName.data;
	windowClass.hIconSm = null;

	RegisterClassExA(^windowClass);

	// Fake window
	fakeWindow := CreateWindowExA(0, windowClassName.data, windowTitle.data, WS_CLIPSIBLINGS |
			WS_CLIPCHILDREN, 0, 0, 1, 1, null, null, hInstance, null);

	// Fake context
	fakeContext := GetDC(fakeWindow);

	// @Todo: initialization to zero
	pfd : PIXELFORMATDESCRIPTOR;
	pfd.nSize = cast(u16) sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion = 1;
	pfd.dwFlags = PFD_DOUBLEBUFFER | PFD_SUPPORT_OPENGL | PFD_DRAW_TO_WINDOW;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.cColorBits = 32;
	pfd.cRedBits = 0;
	pfd.cRedShift = 0;
	pfd.cGreenBits = 0;
	pfd.cGreenShift = 0;
	pfd.cBlueBits = 0;
	pfd.cBlueShift = 0;
	pfd.cAlphaBits = 0;
	pfd.cAlphaShift = 0;
	pfd.cAccumBits = 0;
	pfd.cAccumRedBits = 0;
	pfd.cAccumGreenBits = 0;
	pfd.cAccumBlueBits = 0;
	pfd.cAccumAlphaBits = 0;
	pfd.cDepthBits = 32;
	pfd.cStencilBits = 0;
	pfd.cAuxBuffers = 0;
	pfd.iLayerType = 0;
	pfd.bReserved = 0;
	pfd.dwLayerMask = 0;
	pfd.dwVisibleMask = 0;
	pfd.dwDamageMask = 0;

	choose := ChoosePixelFormat(fakeContext, ^pfd);

	SetPixelFormat(fakeContext, choose, ^pfd);

	fakeGlContext := wglCreateContext(fakeContext);
	wglMakeCurrent(fakeContext, fakeGlContext);

	// Real context
	LoadWGLProcedures();

	windowHandle = CreateWindowExA(0, windowClassName.data, windowTitle.data,
			WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, windowWidth, windowHeight, 0, 0, hInstance, 0);

	deviceContext = GetDC(windowHandle);
	pixelAttribs : [23] u32;
	pixelAttribs[0] = WGL_DRAW_TO_WINDOW_ARB;
	pixelAttribs[1] = true;
	pixelAttribs[2] = WGL_SUPPORT_OPENGL_ARB;
	pixelAttribs[3] = true;
	pixelAttribs[4] = WGL_DOUBLE_BUFFER_ARB;
	pixelAttribs[5] = true;
	pixelAttribs[6] = WGL_PIXEL_TYPE_ARB;
	pixelAttribs[7] = WGL_TYPE_RGBA_ARB;
	pixelAttribs[8] = WGL_ACCELERATION_ARB;
	pixelAttribs[9] = WGL_FULL_ACCELERATION_ARB;
	pixelAttribs[10] = WGL_COLOR_BITS_ARB;
	pixelAttribs[11] = 32;
	pixelAttribs[12] = WGL_ALPHA_BITS_ARB;
	pixelAttribs[13] = 8;
	pixelAttribs[14] = WGL_DEPTH_BITS_ARB;
	pixelAttribs[15] = 24;
	pixelAttribs[16] = WGL_STENCIL_BITS_ARB;
	pixelAttribs[17] = 8;
	pixelAttribs[18] = WGL_SAMPLE_BUFFERS_ARB;
	pixelAttribs[19] = true;
	pixelAttribs[20] = WGL_SAMPLES_ARB;
	pixelAttribs[21] = 4;
	pixelAttribs[22] = 0;

	pixelFormatId : s32;
	numFormats: u32;
	wglChoosePixelFormatARB(deviceContext, ^pixelAttribs, null, 1,
			^pixelFormatId, ^numFormats);

	DescribePixelFormat(deviceContext, pixelFormatId, cast(u32)sizeof(pfd), ^pfd);
	SetPixelFormat(deviceContext, pixelFormatId, ^pfd);

	contextAttribs : [7] s32;
	contextAttribs[0] = WGL_CONTEXT_MAJOR_VERSION_ARB;
	contextAttribs[1] = 3;
	contextAttribs[2] = WGL_CONTEXT_MINOR_VERSION_ARB;
	contextAttribs[3] = 3;
	contextAttribs[4] = WGL_CONTEXT_PROFILE_MASK_ARB;
	contextAttribs[5] = WGL_CONTEXT_CORE_PROFILE_BIT_ARB;
	contextAttribs[6] = 0;

	glContext = wglCreateContextAttribsARB(deviceContext, 0, ^contextAttribs);

	wglMakeCurrent(null, null);
	wglDeleteContext(fakeGlContext);
	ReleaseDC(fakeWindow, fakeContext);
	DestroyWindow(fakeWindow);

	wglMakeCurrent(deviceContext, glContext);
}

Main :: () -> s64
{
	InitOpenGLContext();

	vertexArrayId : GLuint;
	glGenVertexArrays(1, ^vertexArrayId);
	glBindVertexArray(vertexArrayId);

	vertexBufferData : [9] GLfloat;
	vertexBufferData[0] = -1.0;
	vertexBufferData[1] = -1.0;
	vertexBufferData[2] =  0.0;
	vertexBufferData[3] =  1.0;
	vertexBufferData[4] = -1.0;
	vertexBufferData[5] =  0.0;
	vertexBufferData[6] =  0.0;
	vertexBufferData[7] =  1.0;
	vertexBufferData[8] =  0.0;

	vertexBuffer : GLuint;
	glGenBuffers(1, ^vertexBuffer);
	glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertexBufferData), ^vertexBufferData, GL_STATIC_DRAW);

	vertexShaderId   := LoadShader("tests/opengl3example_vertexshader.glsl",   GL_VERTEX_SHADER);
	fragmentShaderId := LoadShader("tests/opengl3example_fragmentshader.glsl", GL_FRAGMENT_SHADER);
	programId := glCreateProgram();
	glAttachShader(programId, vertexShaderId);
	glAttachShader(programId, fragmentShaderId);
	glLinkProgram(programId);

	logSize : s32;
	glGetProgramiv(programId, GL_INFO_LOG_LENGTH, ^logSize);
	if logSize > 0
	{
		programLog : String;
		programLog.size = cast(u64)logSize;
		programLog.data = cast(^u8)VirtualAlloc(0, programLog.size, MEM_COMMIT, PAGE_READWRITE);
		defer VirtualFree(programLog.data, 0, MEM_RELEASE);
		glGetProgramInfoLog(programId, logSize, null, programLog.data);
		PrintF("%\n", programLog);
	}

	glUseProgram(programId);

	message : MSG;
	while running
	{
		glClearColor(0.8, 0.6, 0.0, 0.0);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		glEnableVertexAttribArray(0);
		glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, null);
		glDrawArrays(GL_TRIANGLES, 0, 3);
		glDisableVertexAttribArray(0);

		SwapBuffers(deviceContext);

		while PeekMessageA(^message, 0, 0, 0, PM_REMOVE)
		{
			if message.message == WM_QUIT
			{
				running = 0;
			}
			else
			{
				TranslateMessage(^message);
				DispatchMessageA(^message);
			}
		}
	}

	ExitProcess(0);
	return 0;
}
