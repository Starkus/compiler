#include "core/basic.fab";
#include "core/print.fab";

Person :: struct
{
	id : u64;
	age : s32;
	height : f32;
}

Couple :: struct
{
	husband : Person;
	wife : Person;
}

structByValue :: (person : Person)
{
	person.age = 99;
}

structByPointer :: (person : ^Person)
{
	person.age = 99;
}

Aligned :: struct #align(32)
{
	oneByte: u8;
}

// Pointer to self
Node :: struct
{
	next : ^Node;
}

Main :: (args : [] String) -> s64
{
	a : Person;
	b : Person;
	
	a.id = 123456789;
	a.age = 25;
	a.height = 170;

	// Copy
	b = a;

	couple : Couple;
	couple.husband.id = 40;
	couple.husband.age = 22;
	couple.husband.height = 1.73;
	couple.wife.id = 41;
	couple.wife.age = 29;
	couple.wife.height = 1.71;

	if couple.husband.id > couple.wife.id
		PrintF("Couple: %\n", couple);

	structByValue(a);
	PrintF("Struct by value: id:% age:% height:%\n", a.id, a.age, a.height);
	structByPointer(^b);
	PrintF("Struct by pointer: id:% age:% height:%\n", b.id, b.age, b.height);

	pointerToA := ^a;
	pointerToA.age = 64;

	pointerToBAge : ^s32 = ^b.age;
	@pointerToBAge = 1;

	// Struct literals
	literalCouple : Couple = { 40, 23, 1.73, 41, 29, 1.71 };
	PrintF("Literal couple: %\n", literalCouple);

	incompleteLiteral : Couple = { 40, 22 };
	PrintF("Incomplete literal couple: %\n", incompleteLiteral);

	literalWithNames : Person = { 30, height = 1.54 };
	PrintF("Literal with names: %\n", literalWithNames);
	if literalWithNames.height != 1.54
		return 1;

	anAlignedStruct1: Aligned;
	anAlignedStruct2: Aligned;
	anAlignedStruct3: Aligned;
	PrintF("Structs aligned to 32 bytes (0x20): % % %\n", ^anAlignedStruct1, ^anAlignedStruct2, ^anAlignedStruct3);

	// Inline struct
	foo: struct { a: s32; b: s32; } = { 1, 2 };

	Print("Test ok\n");
	return 0;
}
